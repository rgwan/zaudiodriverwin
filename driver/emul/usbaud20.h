/*
   This file is part of the EMU CA0189 USB Audio Driver.

   Copyright (C) 2008 EMU Systems/Creative Technology Ltd. 

   This driver is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either
   version 2 of the License, or (at your option) any later version.

   This driver is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public License
   along with this library.   If not, a copy of the GNU Lesser General Public 
   License can be found at <http://www.gnu.org/licenses/>.
*/
/**********************************************************

  usbaudio.h
  
  History:
    9/14/2005 - created (hyhuang)
    
  Description:
    declarations and definitions for USB Audio 2.0 Device class
 
**********************************************************/

#ifndef __USB_AUDIO_20_H__
#define __USB_AUDIO_20_H__

#include <pshpack1.h>

// ---------------- audio device class codes -------------------

// audio interface/function class code
#define USB_CLASS_CODE_AUDIO								0x01

// audio interface/function subclass codes
#define USB_AUDIO_20_SUBCLASS_UNDEFINED						0x00
#define USB_AUDIO_20_SUBCLASS_AUDIOCONTROL						0x01
#define USB_AUDIO_20_SUBCLASS_AUDIOSTREAMING					0x02
#define USB_AUDIO_20_SUBCLASS_MIDISTREAMING					0x03

// audio interface/function protocol codes
#define USB_AUDIO_20_PROTOCOL_UNDEFINED						0x00
#define USB_AUDIO_20_PROTOCOL_VERSION_02_00					0x01 //FIXME: TBD

// audio function category codes
#define USB_AUDIO_20_CATEGORY_UNDEFINED						0x00
#define USB_AUDIO_20_CATEGORY_DESKTOP_SPEAKER					0x01
#define USB_AUDIO_20_CATEGORY_HOME_THEATER						0x02
#define USB_AUDIO_20_CATEGORY_MICROPHONE						0x03
#define USB_AUDIO_20_CATEGORY_HEADSET							0x04
#define USB_AUDIO_20_CATEGORY_TELEPHONE						0x05
#define USB_AUDIO_20_CATEGORY_CONVERTER						0x06
#define USB_AUDIO_20_CATEGORY_VOICE_SOUND_RECORDER				0x07
#define USB_AUDIO_20_CATEGORY_IO_BOX							0x08
#define USB_AUDIO_20_CATEGORY_MUSICAL_INSTRUMENT				0x09
#define USB_AUDIO_20_CATEGORY_PRO_AUDIO						0x0A
#define USB_AUDIO_20_CATEGORY_AUDIO_VIDEO						0x0B
#define USB_AUDIO_20_CATEGORY_CONTROL_PANEL					0x0C
#define USB_AUDIO_20_CATEGORY_OTHER							0xFF

// audio class-specific descriptor types
#define USB_AUDIO_20_CS_UNDEFINED								0x20
#define USB_AUDIO_20_CS_DEVICE									0x21
#define USB_AUDIO_20_CS_CONFIGURATION							0x22
#define USB_AUDIO_20_CS_STRING									0x23
#define USB_AUDIO_20_CS_INTERFACE								0x24
#define USB_AUDIO_20_CS_ENDPOINT								0x25

// audio class-specific Audio Control interface descriptor subtypes
#define USB_AUDIO_20_AC_DESCRIPTOR_UNDEFINED					0x00
#define USB_AUDIO_20_AC_DESCRIPTOR_HEADER						0x01
#define USB_AUDIO_20_AC_DESCRIPTOR_INPUT_TERMINAL				0x02
#define USB_AUDIO_20_AC_DESCRIPTOR_OUTPUT_TERMINAL				0x03
#define USB_AUDIO_20_AC_DESCRIPTOR_MIXER_UNIT					0x04
#define USB_AUDIO_20_AC_DESCRIPTOR_SELECTOR_UNIT				0x05
#define USB_AUDIO_20_AC_DESCRIPTOR_FEATURE_UNIT				0x06
#define USB_AUDIO_20_AC_DESCRIPTOR_EFFECT_UNIT					0x07
#define USB_AUDIO_20_AC_DESCRIPTOR_PROCESSING_UNIT				0x08
#define USB_AUDIO_20_AC_DESCRIPTOR_EXTENSION_UNIT				0x09
#define USB_AUDIO_20_AC_DESCRIPTOR_CLOCK_SOURCE				0x0A
#define USB_AUDIO_20_AC_DESCRIPTOR_CLOCK_SELECTOR				0x0B
#define USB_AUDIO_20_AC_DESCRIPTOR_CLOCK_MULTIPLIER			0x0C
#define USB_AUDIO_20_AC_DESCRIPTOR_SRC_UNIT					0x0D // FIXME: Missing from spec

// audio class-specific Audio Streaming interface descriptor subtypes
#define USB_AUDIO_20_AS_DESCRIPTOR_UNDEFINED					0x00
#define USB_AUDIO_20_AS_DESCRIPTOR_GENERAL						0x01
#define USB_AUDIO_20_AS_DESCRIPTOR_FORMAT_TYPE					0x02
#define USB_AUDIO_20_AS_DESCRIPTOR_ENCODER						0x03
#define USB_AUDIO_20_AS_DESCRIPTOR_DECODER						0x04

// audio class-specific MIDI Streaming interface descriptor subtypes
#define USB_AUDIO_20_MS_DESCRIPTOR_UNDEFINED					0x00
#define USB_AUDIO_20_MS_DESCRIPTOR_HEADER						0x01
#define USB_AUDIO_20_MS_DESCRIPTOR_MIDI_IN_JACK				0x02
#define USB_AUDIO_20_MS_DESCRIPTOR_MIDI_OUT_JACK				0x03
#define USB_AUDIO_20_MS_DESCRIPTOR_ELEMENT						0x04

// audio class-specific endpoint descriptor subtypes
#define USB_AUDIO_20_EP_DESCRIPTOR_UNDEFINED					0x00
#define USB_AUDIO_20_EP_DESCRIPTOR_GENERAL						0x01

// effect unit process types
#define USB_AUDIO_20_EFFECT_UNDEFINED							0x00
#define USB_AUDIO_20_EFFECT_PARAMETRIC_EQ_SECTION				0x01
#define USB_AUDIO_20_EFFECT_REVERBERATION						0x02
#define USB_AUDIO_20_EFFECT_MODULATION_DELAY					0x03
#define USB_AUDIO_20_EFFECT_DYNAMIC_RANGE_COMPRESSION			0x04

// processing unit process types
#define USB_AUDIO_20_PROCESS_UNDEFINED							0x00
#define USB_AUDIO_20_PROCESS_UPMIX_DOWNMIX						0x01
#define USB_AUDIO_20_PROCESS_DOLBY_PROLOGIC					0x02
#define USB_AUDIO_20_PROCESS_STEREO_EXTENDER					0x03

// encoder type codes
#define USB_AUDIO_20_ENCODER_UNDEFINED							0x00
#define USB_AUDIO_20_ENCODER_OTHER								0x01
#define USB_AUDIO_20_ENCODER_MPEG								0x02
#define USB_AUDIO_20_ENCODER_AC3								0x03
#define USB_AUDIO_20_ENCODER_WMA								0x04
#define USB_AUDIO_20_ENCODER_DTS								0x05

// decoder type codes
#define USB_AUDIO_20_DECODER_UNDEFINED							0x00
#define USB_AUDIO_20_DECODER_OTHER								0x01
#define USB_AUDIO_20_DECODER_MPEG								0x02
#define USB_AUDIO_20_DECODER_AC3								0x03
#define USB_AUDIO_20_DECODER_WMA								0x04
#define USB_AUDIO_20_DECODER_DTS								0x05

// audio class-specific request codes
#define USB_AUDIO_20_REQUEST_CODE_UNDEFINED						0x00
#define USB_AUDIO_20_REQUEST_CUR								0x01
#define USB_AUDIO_20_REQUEST_RANGE								0x02
#define USB_AUDIO_20_REQUEST_MEM								0x03

#define USB_AUDIO_20_REQUEST_UNDEFINED							0x00
#define USB_AUDIO_20_REQUEST_SET_CUR							0x01
#define USB_AUDIO_20_REQUEST_GET_CUR							0x81
#define USB_AUDIO_20_REQUEST_SET_RANGE							0x02
#define USB_AUDIO_20_REQUEST_GET_RANGE							0x82
#define USB_AUDIO_20_REQUEST_SET_MEM							0x03
#define USB_AUDIO_20_REQUEST_GET_MEM							0x83

// audio data endpoint attributes
#define USB_AUDIO_20_DATA_EP_ATTR_SAMPLING_FREQUENCY			0x01  // sampling frequency control is supported
#define USB_AUDIO_20_DATA_EP_ATTR_PITCH						0x02  // pitch control is supported
#define USB_AUDIO_20_DATA_EP_ATTR_MAX_PACKETS_ONLY				0x80  // partial packets must be padded

// "lock delay" unit constants for audio data endpoints
#define USB_AUDIO_20_DATA_EP_DELAY_UNIT_UNDEFINED				0x00
#define USB_AUDIO_20_DATA_EP_DELAY_UNIT_MILLISECONDS			0x01
#define USB_AUDIO_20_DATA_EP_DELAY_UNIT_SAMPLES				0x02

// MIDI jack types
#define USB_AUDIO_20_MIDI_JACK_TYPE_UNDEFINED					0x00
#define USB_AUDIO_20_MIDI_JACK_TYPE_EMBEDDED					0x01
#define USB_AUDIO_20_MIDI_JACK_TYPE_EXTERNAL					0x02

// ------------------ control selector codes -------------------

// clock source control selectors 
#define USB_AUDIO_20_CS_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_CS_CONTROL_FREQUENCY						0x01
#define USB_AUDIO_20_CS_CONTROL_VALIDITY						0x02
#define USB_AUDIO_20_CS_NUM_CONTROL_SELECTORS					0x03

// clock selector control selectors 
#define USB_AUDIO_20_CX_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_CX_CONTROL_SELECTOR						0x01
#define USB_AUDIO_20_CX_NUM_CONTROL_SELECTORS					0x02

// clock source control selectors 
#define USB_AUDIO_20_CM_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_CM_CONTROL_NUMERATOR						0x01
#define USB_AUDIO_20_CM_CONTROL_DENOMINATOR					0x02
#define USB_AUDIO_20_CM_NUM_CONTROL_SELECTORS					0x03

// terminal control selectors 
#define USB_AUDIO_20_TE_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_TE_CONTROL_COPY_PROTECT					0x01
#define USB_AUDIO_20_TE_CONTROL_CONNECTOR						0x02
#define USB_AUDIO_20_TE_CONTROL_OVERLOAD						0x03
#define USB_AUDIO_20_TE_CONTROL_CLUSTER						0x04
#define USB_AUDIO_20_TE_CONTROL_UNDERFLOW						0x05
#define USB_AUDIO_20_TE_CONTROL_OVERFLOW						0x06
#define USB_AUDIO_20_TE_CONTROL_LATENCY						0x07
#define USB_AUDIO_20_TE_NUM_CONTROL_SELECTORS					0x08

// mixer control selectors 
#define USB_AUDIO_20_MU_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_MU_CONTROL_MIXER							0x01
#define USB_AUDIO_20_MU_CONTROL_CLUSTER						0x02
#define USB_AUDIO_20_MU_CONTROL_UNDERFLOW						0x03
#define USB_AUDIO_20_MU_CONTROL_OVERFLOW						0x04
#define USB_AUDIO_20_MU_CONTROL_LATENCY						0x05
#define USB_AUDIO_20_MU_NUM_CONTROL_SELECTORS					0x06

// selector control selectors 
#define USB_AUDIO_20_SU_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_SU_CONTROL_SELECTOR						0x01
#define USB_AUDIO_20_SU_CONTROL_LATENCY						0x02
#define USB_AUDIO_20_SU_NUM_CONTROL_SELECTORS					0x03

// feature unit control selectors
#define USB_AUDIO_20_FU_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_FU_CONTROL_MUTE							0x01
#define USB_AUDIO_20_FU_CONTROL_VOLUME							0x02
#define USB_AUDIO_20_FU_CONTROL_BASS							0x03
#define USB_AUDIO_20_FU_CONTROL_MID							0x04
#define USB_AUDIO_20_FU_CONTROL_TREBLE							0x05
#define USB_AUDIO_20_FU_CONTROL_GRAPHIC_EQ						0x06
#define USB_AUDIO_20_FU_CONTROL_AUTOMATIC_GAIN					0x07
#define USB_AUDIO_20_FU_CONTROL_DELAY							0x08
#define USB_AUDIO_20_FU_CONTROL_BASS_BOOST						0x09
#define USB_AUDIO_20_FU_CONTROL_LOUDNESS						0x0A
#define USB_AUDIO_20_FU_CONTROL_INPUT_GAIN						0x0B
#define USB_AUDIO_20_FU_CONTROL_INPUT_GAIN_PAD					0x0C
#define USB_AUDIO_20_FU_CONTROL_PHASE_INVERTER					0x0D
#define USB_AUDIO_20_FU_CONTROL_UNDERFLOW						0x0E
#define USB_AUDIO_20_FU_CONTROL_OVERFLOW						0x0F
#define USB_AUDIO_20_FU_CONTROL_LATENCY						0x10
#define USB_AUDIO_20_FU_NUM_CONTROL_SELECTORS					0x11

// sample rate converter unit control selectors
#define USB_AUDIO_20_RU_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_RU_CONTROL_LATENCY						0x01
#define USB_AUDIO_20_RU_NUM_CONTROL_SELECTORS					0x02

// parametric equalizer section effect unit control selectors 
#define USB_AUDIO_20_PE_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_PE_CONTROL_ENABLE							0x01
#define USB_AUDIO_20_PE_CONTROL_CENTER_FREQ					0x02
#define USB_AUDIO_20_PE_CONTROL_QFACTOR						0x03
#define USB_AUDIO_20_PE_CONTROL_GAIN							0x04
#define USB_AUDIO_20_PE_CONTROL_UNDERFLOW						0x05
#define USB_AUDIO_20_PE_CONTROL_OVERFLOW						0x06
#define USB_AUDIO_20_PE_CONTROL_LATENCY						0x07
#define USB_AUDIO_20_PE_NUM_CONTROL_SELECTORS					0x08

// reverberation effect unit control selectors
#define USB_AUDIO_20_RV_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_RV_CONTROL_ENABLE							0x01
#define USB_AUDIO_20_RV_CONTROL_TYPE							0x02
#define USB_AUDIO_20_RV_CONTROL_LEVEL							0x03
#define USB_AUDIO_20_RV_CONTROL_TIME							0x04
#define USB_AUDIO_20_RV_CONTROL_FEEDBACK						0x05
#define USB_AUDIO_20_RV_CONTROL_PREDELAY						0x06
#define USB_AUDIO_20_RV_CONTROL_DENSITY						0x07
#define USB_AUDIO_20_RV_CONTROL_HIFREQ_ROLLOFF					0x08
#define USB_AUDIO_20_RV_CONTROL_UNDERFLOW						0x09
#define USB_AUDIO_20_RV_CONTROL_OVERFLOW						0x0A
#define USB_AUDIO_20_RV_CONTROL_LATENCY						0x0B
#define USB_AUDIO_20_RV_NUM_CONTROL_SELECTORS					0x0C

// modulation delay effect unit control selectors
#define USB_AUDIO_20_MD_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_MD_CONTROL_ENABLE							0x01
#define USB_AUDIO_20_MD_CONTROL_BALANCE						0x02
#define USB_AUDIO_20_MD_CONTROL_RATE							0x03
#define USB_AUDIO_20_MD_CONTROL_DEPTH							0x04
#define USB_AUDIO_20_MD_CONTROL_TIME							0x05
#define USB_AUDIO_20_MD_CONTROL_FEEDBACK						0x06
#define USB_AUDIO_20_MD_CONTROL_UNDERFLOW						0x07
#define USB_AUDIO_20_MD_CONTROL_OVERFLOW						0x08
#define USB_AUDIO_20_MD_CONTROL_LATENCY						0x09
#define USB_AUDIO_20_MD_NUM_CONTROL_SELECTORS					0x0A

// dynamic range compressor effect unit control selectors
#define USB_AUDIO_20_DR_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_DR_CONTROL_ENABLE							0x01
#define USB_AUDIO_20_DR_CONTROL_COMPRESSION_RATIO				0x02
#define USB_AUDIO_20_DR_CONTROL_MAX_AMPLITUDE					0x03
#define USB_AUDIO_20_DR_CONTROL_THRESHOLD						0x04
#define USB_AUDIO_20_DR_CONTROL_ATTACK_TIME					0x05
#define USB_AUDIO_20_DR_CONTROL_RELEASE_TIME					0x06
#define USB_AUDIO_20_DR_CONTROL_UNDERFLOW						0x07
#define USB_AUDIO_20_DR_CONTROL_OVERFLOW						0x08
#define USB_AUDIO_20_DR_CONTROL_LATENCY						0x09
#define USB_AUDIO_20_DR_NUM_CONTROL_SELECTORS					0x0A

// up/down-mix processing unit control selectors
#define USB_AUDIO_20_UD_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_UD_CONTROL_ENABLE							0x01
#define USB_AUDIO_20_UD_CONTROL_MODE_SELECT					0x02
#define USB_AUDIO_20_UD_CONTROL_CLUSTER						0x03
#define USB_AUDIO_20_UD_CONTROL_UNDERFLOW						0x04
#define USB_AUDIO_20_UD_CONTROL_OVERFLOW						0x05
#define USB_AUDIO_20_UD_CONTROL_LATENCY						0x06
#define USB_AUDIO_20_UD_NUM_CONTROL_SELECTORS					0x07

// Dolby Prologic processing unit control selectors
#define USB_AUDIO_20_DP_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_DP_CONTROL_ENABLE							0x01
#define USB_AUDIO_20_DP_CONTROL_MODE_SELECT					0x02
#define USB_AUDIO_20_DP_CONTROL_CLUSTER						0x03
#define USB_AUDIO_20_DP_CONTROL_UNDERFLOW						0x04
#define USB_AUDIO_20_DP_CONTROL_OVERFLOW						0x05
#define USB_AUDIO_20_DP_CONTROL_LATENCY						0x06
#define USB_AUDIO_20_DP_NUM_CONTROL_SELECTORS					0x07

// stereo extender processing unit control selectors
#define USB_AUDIO_20_ST_EXT_CONTROL_UNDEFINED					0x00
#define USB_AUDIO_20_ST_EXT_CONTROL_ENABLE						0x01
#define USB_AUDIO_20_ST_EXT_CONTROL_WIDTH						0x02
#define USB_AUDIO_20_ST_EXT_CONTROL_CLUSTER					0x03
#define USB_AUDIO_20_ST_EXT_CONTROL_UNDERFLOW					0x04
#define USB_AUDIO_20_ST_EXT_CONTROL_OVERFLOW					0x05
#define USB_AUDIO_20_ST_EXT_CONTROL_LATENCY					0x06
#define USB_AUDIO_20_ST_EXT_NUM_CONTROL_SELECTORS				0x07

// extension unit control selectors
#define USB_AUDIO_20_XU_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_XU_CONTROL_ENABLE							0x01
#define USB_AUDIO_20_XU_CONTROL_CLUSTER						0x02
#define USB_AUDIO_20_XU_CONTROL_UNDERFLOW						0x03
#define USB_AUDIO_20_XU_CONTROL_OVERFLOW						0x04
#define USB_AUDIO_20_XU_CONTROL_LATENCY						0x05
#define USB_AUDIO_20_XU_NUM_CONTROL_SELECTORS					0x06

// audio interface control selectors
#define USB_AUDIO_20_AS_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_AS_CONTROL_ALT_SETTING					0x01
#define USB_AUDIO_20_AS_CONTROL_VALID_ALT_SETTINGS				0x02
#define USB_AUDIO_20_AS_CONTROL_DATA_FORMAT					0x03

// encoder control selectors
#define USB_AUDIO_20_EN_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_EN_CONTROL_BIT_RATE						0x01
#define USB_AUDIO_20_EN_CONTROL_QUALITY						0x02
#define USB_AUDIO_20_EN_CONTROL_VBR							0x03
#define USB_AUDIO_20_EN_CONTROL_TYPE							0x04
#define USB_AUDIO_20_EN_CONTROL_UNDERFLOW						0x05
#define USB_AUDIO_20_EN_CONTROL_OVERFLOW						0x06
#define USB_AUDIO_20_EN_CONTROL_ERROR							0x07
#define USB_AUDIO_20_EN_CONTROL_PARAM1							0x08
#define USB_AUDIO_20_EN_CONTROL_PARAM2							0x09
#define USB_AUDIO_20_EN_CONTROL_PARAM3							0x0A
#define USB_AUDIO_20_EN_CONTROL_PARAM4							0x0B
#define USB_AUDIO_20_EN_CONTROL_PARAM5							0x0C
#define USB_AUDIO_20_EN_CONTROL_PARAM6							0x0D
#define USB_AUDIO_20_EN_CONTROL_PARAM7							0x0E
#define USB_AUDIO_20_EN_CONTROL_PARAM8							0x0F
#define USB_AUDIO_20_EN_NUM_CONTROL_SELECTORS					0x10

// mpeg decoder control selectors
#define USB_AUDIO_20_MD_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_MD_CONTROL_DUAL_CHANNEL					0x01
#define USB_AUDIO_20_MD_CONTROL_SECOND_STEREO					0x02
#define USB_AUDIO_20_MD_CONTROL_MULTILINGUAL					0x03
#define USB_AUDIO_20_MD_CONTROL_DYNAMIC_RANGE					0x04
#define USB_AUDIO_20_MD_CONTROL_SCALING						0x05
#define USB_AUDIO_20_MD_CONTROL_HILO_SCALING					0x06
#define USB_AUDIO_20_MD_CONTROL_UNDERFLOW						0x07
#define USB_AUDIO_20_MD_CONTROL_OVERFLOW						0x08
#define USB_AUDIO_20_MD_CONTROL_ERROR							0x09
#define USB_AUDIO_20_MD_NUM_CONTROL_SELECTORS					0x0A

// ac3 decoder control selectors
#define USB_AUDIO_20_AD_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_AD_CONTROL_MODE							0x01
#define USB_AUDIO_20_AD_CONTROL_DYNAMIC_RANGE					0x02
#define USB_AUDIO_20_AD_CONTROL_SCALING						0x03
#define USB_AUDIO_20_AD_CONTROL_HILO_SCALING					0x04
#define USB_AUDIO_20_AD_CONTROL_UNDERFLOW						0x05
#define USB_AUDIO_20_AD_CONTROL_OVERFLOW						0x06
#define USB_AUDIO_20_AD_CONTROL_ERROR							0x07
#define USB_AUDIO_20_AD_NUM_CONTROL_SELECTORS					0x08

// wma decoder control selectors
#define USB_AUDIO_20_WD_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_WD_CONTROL_UNDERFLOW						0x01
#define USB_AUDIO_20_WD_CONTROL_OVERFLOW						0x02
#define USB_AUDIO_20_WD_CONTROL_ERROR							0x03
#define USB_AUDIO_20_WD_NUM_CONTROL_SELECTORS					0x04

// dts decoder control selectors
#define USB_AUDIO_20_DD_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_DD_CONTROL_UNDERFLOW						0x01
#define USB_AUDIO_20_DD_CONTROL_OVERFLOW						0x02
#define USB_AUDIO_20_DD_CONTROL_ERROR							0x03
#define USB_AUDIO_20_DD_NUM_CONTROL_SELECTORS					0x04

// endpoint control selectors
#define USB_AUDIO_20_EP_CONTROL_UNDEFINED						0x00
#define USB_AUDIO_20_EP_CONTROL_PITCH							0x01
#define USB_AUDIO_20_EP_CONTROL_OVERRUN						0x02
#define USB_AUDIO_20_EP_CONTROL_UNDERRUN						0x03
#define USB_AUDIO_20_EP_NUM_CONTROL_SELECTORS					0x04

// MIDI transfer endpoint control selectors
#define USB_AUDIO_20_MIDI_EP_CONTROL_UNDEFINED					0x00
#define USB_AUDIO_20_MIDI_EP_CONTROL_ASSOCIATION				0x01
#define USB_AUDIO_20_MIDI_EP_NUM_CONTROL_SELECTORS				0x02

// MIDI element capabilities
#define USB_AUDIO_20_MIDI_EL_CAPABILITY_UNDEFINED				0x00
#define USB_AUDIO_20_MIDI_EL_CAPABILITY_CUSTOM 				0x01
#define USB_AUDIO_20_MIDI_EL_CAPABILITY_CLOCK					0x02
#define USB_AUDIO_20_MIDI_EL_CAPABILITY_MTC					0x03
#define USB_AUDIO_20_MIDI_EL_CAPABILITY_MMC					0x04
#define USB_AUDIO_20_MIDI_EL_CAPABILITY_GM1					0x05
#define USB_AUDIO_20_MIDI_EL_CAPABILITY_GM2					0x06
#define USB_AUDIO_20_MIDI_EL_CAPABILITY_GS						0x07
#define USB_AUDIO_20_MIDI_EL_CAPABILITY_XG						0x08
#define USB_AUDIO_20_MIDI_EL_CAPABILITY_EFX					0x09
#define USB_AUDIO_20_MIDI_EL_CAPABILITY_PATCH_BAY				0x0A
#define USB_AUDIO_20_MIDI_EL_CAPABILITY_DLS1					0x0B
#define USB_AUDIO_20_MIDI_EL_CAPABILITY_DLS2					0x0C

// format type codes
#define USB_AUDIO_20_FORMAT_TYPE_UNDEFINED						0x00
#define USB_AUDIO_20_FORMAT_TYPE_I								0x01
#define USB_AUDIO_20_FORMAT_TYPE_II							0x02
#define USB_AUDIO_20_FORMAT_TYPE_III							0x03
#define USB_AUDIO_20_FORMAT_TYPE_IV							0x04
#define USB_AUDIO_20_EXT_FORMAT_TYPE_I							0x81
#define USB_AUDIO_20_EXT_FORMAT_TYPE_II						0x82
#define USB_AUDIO_20_EXT_FORMAT_TYPE_III						0x83

// audio data format bit allocation in the bmFormats field
// Type I
#define USB_AUDIO_20_FORMAT_TYPE_I_PCM							0x00000001
#define USB_AUDIO_20_FORMAT_TYPE_I_PCM8						0x00000002
#define USB_AUDIO_20_FORMAT_TYPE_I_IEEE_FLOAT					0x00000004
#define USB_AUDIO_20_FORMAT_TYPE_I_ALAW						0x00000008
#define USB_AUDIO_20_FORMAT_TYPE_I_MULAW						0x00000010
#define USB_AUDIO_20_FORMAT_TYPE_I_RESERVED					0x7FFFFFE0
#define USB_AUDIO_20_FORMAT_TYPE_I_RAW_DATA					0x80000000
// Type II
#define USB_AUDIO_20_FORMAT_TYPE_II_MPEG						0x00000001
#define USB_AUDIO_20_FORMAT_TYPE_II_AC3						0x00000002
#define USB_AUDIO_20_FORMAT_TYPE_II_WMA						0x00000004
#define USB_AUDIO_20_FORMAT_TYPE_II_DTS						0x00000008
#define USB_AUDIO_20_FORMAT_TYPE_II_RESERVED					0x7FFFFFF0
#define USB_AUDIO_20_FORMAT_TYPE_II_RAW_DATA					0x80000000
// Type III
#define USB_AUDIO_20_FORMAT_TYPE_III_IEC61937_AC3					0x00000001
#define USB_AUDIO_20_FORMAT_TYPE_III_IEC61937_MPEG1_LAYER_1		0x00000002
#define USB_AUDIO_20_FORMAT_TYPE_III_IEC61937_MPEG1_LAYER_23		0x00000004  // this is not a
#define USB_AUDIO_20_FORMAT_TYPE_III_IEC61937_MPEG2_NOEXT			0x00000004  // mistake
#define USB_AUDIO_20_FORMAT_TYPE_III_IEC61937_MPEG2_EXT			0x00000008
#define USB_AUDIO_20_FORMAT_TYPE_III_IEC61937_MPEG2_AAC_ADTS		0x00000010
#define USB_AUDIO_20_FORMAT_TYPE_III_IEC61937_MPEG2_LAYER_1_LS		0x00000020
#define USB_AUDIO_20_FORMAT_TYPE_III_IEC61937_MPEG2_LAYER_23_LS	0x00000040
#define USB_AUDIO_20_FORMAT_TYPE_III_IEC61937_DTS_I				0x00000080
#define USB_AUDIO_20_FORMAT_TYPE_III_IEC61937_DTS_II				0x00000100
#define USB_AUDIO_20_FORMAT_TYPE_III_IEC61937_DTS_III				0x00000200
#define USB_AUDIO_20_FORMAT_TYPE_III_IEC61937_ATRAC				0x00000400
#define USB_AUDIO_20_FORMAT_TYPE_III_IEC61937_ATRAC23				0x00000800
#define USB_AUDIO_20_FORMAT_TYPE_III_TYPE_III_WMA					0x00001000
#define USB_AUDIO_20_FORMAT_TYPE_III_RESERVED						0xFFFFE000
// Type IV
#define USB_AUDIO_20_FORMAT_TYPE_IV_PCM						0x00000001
#define USB_AUDIO_20_FORMAT_TYPE_IV_PCM8						0x00000002
#define USB_AUDIO_20_FORMAT_TYPE_IV_IEEE_FLOAT					0x00000004
#define USB_AUDIO_20_FORMAT_TYPE_IV_ALAW						0x00000008
#define USB_AUDIO_20_FORMAT_TYPE_IV_MULAW						0x00000010
#define USB_AUDIO_20_FORMAT_TYPE_IV_MPEG						0x00000020
#define USB_AUDIO_20_FORMAT_TYPE_IV_AC3						0x00000040
#define USB_AUDIO_20_FORMAT_TYPE_IV_WMA						0x00000080
#define USB_AUDIO_20_FORMAT_TYPE_IV_IEC61937_AC3				0x00000100
#define USB_AUDIO_20_FORMAT_TYPE_IV_IEC61937_MPEG1_LAYER_1		0x00000200
#define USB_AUDIO_20_FORMAT_TYPE_IV_IEC61937_MPEG1_LAYER_23	0x00000400  // this is not a
#define USB_AUDIO_20_FORMAT_TYPE_IV_IEC61937_MPEG2_NOEXT		0x00000400  // mistake
#define USB_AUDIO_20_FORMAT_TYPE_IV_IEC61937_MPEG2_EXT			0x00000800
#define USB_AUDIO_20_FORMAT_TYPE_IV_IEC61937_MPEG2_AAC_ADTS	0x00001000
#define USB_AUDIO_20_FORMAT_TYPE_IV_IEC61937_MPEG2_LAYER_1_LS	0x00002000
#define USB_AUDIO_20_FORMAT_TYPE_IV_IEC61937_MPEG2_LAYER_23_LS	0x00004000
#define USB_AUDIO_20_FORMAT_TYPE_IV_IEC61937_DTS_I				0x00008000
#define USB_AUDIO_20_FORMAT_TYPE_IV_IEC61937_DTS_II			0x00010000
#define USB_AUDIO_20_FORMAT_TYPE_IV_IEC61937_DTS_III			0x00020000
#define USB_AUDIO_20_FORMAT_TYPE_IV_IEC61937_ATRAC				0x00040000
#define USB_AUDIO_20_FORMAT_TYPE_IV_IEC61937_ATRAC23			0x00080000
#define USB_AUDIO_20_FORMAT_TYPE_IV_TYPE_III_WMA				0x00100000
#define USB_AUDIO_20_FORMAT_TYPE_IV_IEC60958_PCM				0x00200000
#define USB_AUDIO_20_FORMAT_TYPE_IV_RESERVED					0xFFC00000

// side band protocol codes
#define USB_AUDIO_20_SIDEBAND_PROTOCOL_UNDEFINED				0x00
#define USB_AUDIO_20_SIDEBAND_PROTOCOL_PRESENTATION_TIMESTAMP	0x01

// clock types
#define USB_AUDIO_20_CLOCK_TYPE_EXTERNAL						0x00
#define USB_AUDIO_20_CLOCK_TYPE_INTERNAL_FIXED					0x01
#define USB_AUDIO_20_CLOCK_TYPE_INTERNAL_VARIABLE				0x02
#define USB_AUDIO_20_CLOCK_TYPE_INTERNAL_PROGRAMMABLE			0x03

// MPEG capabilities
#define USB_MPEG_CAPABILITY_SUPPORT_LAYER_1					0x0001
#define USB_MPEG_CAPABILITY_SUPPORT_LAYER_2					0x0002
#define USB_MPEG_CAPABILITY_SUPPORT_LAYER_3					0x0004
#define USB_MPEG_CAPABILITY_MPEG_1_ONLY						0x0008
#define USB_MPEG_CAPABILITY_MPEG_1_DUAL_CHANNEL				0x0010
#define USB_MPEG_CAPABILITY_MPEG_2_SECOND_STEREO			0x0020
#define USB_MPEG_CAPABILITY_MPEG_2_7_DOT_1					0x0040
#define USB_MPEG_CAPABILITY_ADAPTIVE_MULTICHANNEL			0x0080
#define USB_MPEG_CAPABILITY_MULTILINGUAL_UNSUPPORTED		0x0000
#define USB_MPEG_CAPABILITY_MULTILINGUAL_AT_FS				0x0100
#define USB_MPEG_CAPABILITY_MULTILINGUAL_RESERVED			0x0200
#define USB_MPEG_CAPABILITY_MULTILINGUAL_AT_FS_AND_HALF_FS	0x0300
#define USB_MPEG_CAPABILITY_SUPPORT_HALF_FS					0x0400

// MPEG features
#define USB_MPEG_FEATURE_DYN_RANGE_CTRL_UNSUPPORTED			0x0000
#define USB_MPEG_FEATURE_DYN_RANGE_CTRL_NONSCALABLE			0x0010
#define USB_MPEG_FEATURE_DYN_RANGE_CTRL_WITH_COMMON_BOOST	0x0020
#define USB_MPEG_FEATURE_DYN_RANGE_CTRL_WITH_SEPARATE_BOOST	0x0030

// AC3 features
#define USB_AC3_FEATURE_RF_MODE								0x0001
#define USB_AC3_FEATURE_LINE_MODE							0x0002
#define USB_AC3_FEATURE_CUSTOM_0_MODE						0x0004
#define USB_AC3_FEATURE_CUSTOM_1_MODE						0x0008
#define USB_AC3_FEATURE_DYN_RANGE_CTRL_UNSUPPORTED			0x0000
#define USB_AC3_FEATURE_DYN_RANGE_CTRL_NONSCALABLE			0x0010
#define USB_AC3_FEATURE_DYN_RANGE_CTRL_WITH_COMMON_BOOST	0x0020
#define USB_AC3_FEATURE_DYN_RANGE_CTRL_WITH_SEPARATE_BOOST	0x0030

// WMA profiles
#define USB_WMA_PROFILE_1_L1								0x0001
#define USB_WMA_PROFILE_2_L2								0x0002
#define USB_WMA_PROFILE_3_L3								0x0004
#define USB_WMA_PROFILE_OTHER_L								0x0008
#define USB_WMA_PROFILE_SPEECH_1_S1							0x0010
#define USB_WMA_PROFILE_SPEECH_2_S2							0x0020
#define USB_WMA_PROFILE_PRO_1_M1							0x0040
#define USB_WMA_PROFILE_PRO_2_M2							0x0080
#define USB_WMA_PROFILE_PRO_3_M3							0x0100
#define USB_WMA_PROFILE_PRO_OTHER_M							0x0200
#define USB_WMA_PROFILE_LOSSLESS							0x0400

// DTS capabilities
#define USB_DTS_CAPABILITY_CORE								0x01
#define USB_DTS_CAPABILITY_LOSELESS							0x02
#define USB_DTS_CAPABILITY_LBR								0x04
#define USB_DTS_CAPABILITY_MULTIPLE_STREAM_MIXING			0x08
#define USB_DTS_CAPABILITY_DUAL_DECODE						0x10

// --- terminal types
// USB terminal types
#define USB_TERMINAL_USB_UNDEFINED									0x0100
#define USB_TERMINAL_USB_STREAMING									0x0101
#define USB_TERMINAL_USB_VENDOR_SPECIFIC							0x01FF

// input terminal types
#define USB_TERMINAL_INPUT_UNDEFINED								0x0200
#define USB_TERMINAL_INPUT_MICROPHONE								0x0201
#define USB_TERMINAL_INPUT_DESKTOP_MICROPHONE						0x0202
#define USB_TERMINAL_INPUT_PERSONAL_MICROPHONE						0x0203
#define USB_TERMINAL_INPUT_OMNIDIRECTIONAL_MICROPHONE				0x0204
#define USB_TERMINAL_INPUT_MICROPHONE_ARRAY							0x0205
#define USB_TERMINAL_INPUT_PROCESSING_MICROPHONE_ARRAY				0x0206

// output terminal types
#define USB_TERMINAL_OUTPUT_UNDEFINED								0x0300
#define USB_TERMINAL_OUTPUT_SPEAKER									0x0301
#define USB_TERMINAL_OUTPUT_HEADPHONES								0x0302
#define USB_TERMINAL_OUTPUT_HEAD_MOUNTED_DISPLAY_AUDIO				0x0303
#define USB_TERMINAL_OUTPUT_DESKTOP_SPEAKER							0x0304
#define USB_TERMINAL_OUTPUT_ROOM_SPEAKER							0x0305
#define USB_TERMINAL_OUTPUT_COMMUNICATION_SPEAKER					0x0306
#define USB_TERMINAL_OUTPUT_LFE_SPEAKER								0x0307

// bi-directional terminal types
#define USB_TERMINAL_BIDIRECTIONAL_UNDEFINED						0x0400
#define USB_TERMINAL_BIDIRECTIONAL_HANDSET							0x0401
#define USB_TERMINAL_BIDIRECTIONAL_HEADSET							0x0402
#define USB_TERMINAL_BIDIRECTIONAL_SPEAKERPHONE						0x0403
#define USB_TERMINAL_BIDIRECTIONAL_SPEAKERPHONE_ECHO_SUPPRESSING	0x0404
#define USB_TERMINAL_BIDIRECTIONAL_SPEAKERPHONE_ECHO_CANCELLING		0x0405

// telephony terminal types
#define USB_TERMINAL_TELEPHONY_UNDEFINED							0x0500
#define USB_TERMINAL_TELEPHONY_PHONE_LINE							0x0501
#define USB_TERMINAL_TELEPHONY_TELEPHONE							0x0502
#define USB_TERMINAL_TELEPHONY_DOWN_LINE_PHONE						0x0503

// external terminal types
#define USB_TERMINAL_EXTERNAL_UNDEFINED								0x0600
#define USB_TERMINAL_EXTERNAL_ANALOG_CONNECTOR						0x0601
#define USB_TERMINAL_EXTERNAL_DIGITAL_AUDIO_INTERFACE				0x0602
#define USB_TERMINAL_EXTERNAL_LINE_CONNECTOR						0x0603
#define USB_TERMINAL_EXTERNAL_LEGACY_AUDIO_CONNECTOR				0x0604
#define USB_TERMINAL_EXTERNAL_SPDIF_INTERFACE						0x0605
#define USB_TERMINAL_EXTERNAL_1394_DA_STREAM						0x0606
#define USB_TERMINAL_EXTERNAL_1394_DV_STREAM_SOUNDTRACK				0x0607
#define USB_TERMINAL_EXTERNAL_ADAT_LIGHTPIPE						0x0608
#define USB_TERMINAL_EXTERNAL_TDIF									0x0609
#define USB_TERMINAL_EXTERNAL_MADI									0x060A

// embedded function terminal types
#define USB_TERMINAL_EMBEDDED_UNDEFINED								0x0700
#define USB_TERMINAL_EMBEDDED_LEVEL_CALIBRATION_NOISE_SOURCE		0x0701
#define USB_TERMINAL_EMBEDDED_EQUALIZATION_SOURCE					0x0702
#define USB_TERMINAL_EMBEDDED_CD_PLAYER								0x0703
#define USB_TERMINAL_EMBEDDED_DAT									0x0704
#define USB_TERMINAL_EMBEDDED_DCC									0x0705
#define USB_TERMINAL_EMBEDDED_COMPRESSED_AUDIO_PLAYER				0x0706
#define USB_TERMINAL_EMBEDDED_ANALOG_TAPE							0x0707
#define USB_TERMINAL_EMBEDDED_PHONOGRAPH							0x0708
#define USB_TERMINAL_EMBEDDED_VCR_AUDIO								0x0709
#define USB_TERMINAL_EMBEDDED_VIDEO_DISC_AUDIO						0x070A
#define USB_TERMINAL_EMBEDDED_DVD_AUDIO								0x070B
#define USB_TERMINAL_EMBEDDED_TV_TUNER_AUDIO						0x070C
#define USB_TERMINAL_EMBEDDED_SATELLITE_RECEIVER_AUDIO				0x070D
#define USB_TERMINAL_EMBEDDED_CABLE_TUNER_AUDIO						0x070E
#define USB_TERMINAL_EMBEDDED_DSS_AUDIO								0x070F
#define USB_TERMINAL_EMBEDDED_RADIO_RECEIVER						0x0710
#define USB_TERMINAL_EMBEDDED_RADIO_TRANSMITTER						0x0711
#define USB_TERMINAL_EMBEDDED_MULTI_TRACK_RECORDER					0x0712
#define USB_TERMINAL_EMBEDDED_SYNTHESIZER							0x0713
#define USB_TERMINAL_EMBEDDED_PIANO									0x0714
#define USB_TERMINAL_EMBEDDED_GUITAR								0x0715
#define USB_TERMINAL_EMBEDDED_DRUMS_RHYTHM							0x0716
#define USB_TERMINAL_EMBEDDED_OTHER_MUSICAL_INSTRUMENT				0x0717
// -------- miscellaneous USB audio-related structures ---------

// ranges
#define DEFINE_USB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_S1(Range, N) \
struct { \
	USHORT wNumSubRanges; \
	struct { \
		CHAR   bMin; \
		CHAR   bMax; \
		CHAR   bRes; \
	} SubRanges[N]; \
} Range

typedef struct _USB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_S1 {
	USHORT wNumSubRanges;
	struct {
		CHAR   bMin;
		CHAR   bMax;
		CHAR   bRes;
	} SubRanges[1];
} USB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_S1, *PUSB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_S1;

#define DEFINE_USB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_U1(Range, N) \
struct { \
	USHORT wNumSubRanges; \
	struct { \
		UCHAR  bMin; \
		UCHAR  bMax; \
		UCHAR  bRes; \
	} SubRanges[N]; \
} Range

typedef struct _USB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_U1 {
	USHORT wNumSubRanges;
	struct {
		UCHAR  bMin;
		UCHAR  bMax;
		UCHAR  bRes;
	} SubRanges[1];
} USB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_U1, *PUSB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_U1;

#define DEFINE_USB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_S2(Range, N) \
struct { \
	USHORT wNumSubRanges; \
	struct { \
		SHORT  wMin; \
		SHORT  wMax; \
		SHORT  wRes; \
	} SubRanges[N]; \
} Range

typedef struct _USB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_S2 {
	USHORT wNumSubRanges;
	struct {
		SHORT  wMin;
		SHORT  wMax;
		SHORT  wRes;
	} SubRanges[1];
} USB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_S2, *PUSB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_S2;

#define DEFINE_USB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_U2(Range, N) \
struct { \
	USHORT wNumSubRanges; \
	struct { \
		USHORT wMin; \
		USHORT wMax; \
		USHORT wRes; \
	} SubRanges[N]; \
} Range

typedef struct _USB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_U2 {
	USHORT wNumSubRanges;
	struct {
		USHORT wMin;
		USHORT wMax;
		USHORT wRes;
	} SubRanges[1];
} USB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_U2, *PUSB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_U2;

#define DEFINE_USB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_S4(Range, N) \
struct { \
	USHORT wNumSubRanges; \
	struct { \
		LONG  dMin; \
		LONG  dMax; \
		LONG  dRes; \
	} SubRanges[N]; \
} Range

typedef struct _USB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_S4 {
	USHORT wNumSubRanges;
	struct {
		LONG   dMin;
		LONG   dMax;
		LONG   dRes;
	} SubRanges[1];
} USB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_S4, *PUSB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_S4;

#define DEFINE_USB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_U4(Range, N) \
struct { \
	USHORT wNumSubRanges; \
	struct { \
		ULONG  dMin; \
		ULONG  dMax; \
		ULONG  dRes; \
	} SubRanges[N]; \
} Range

typedef struct _USB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_U4 {
	USHORT wNumSubRanges;
	struct {
		ULONG  dMin;
		ULONG  dMax;
		ULONG  dRes;
	} SubRanges[1];
} USB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_U4, *PUSB_AUDIO_20_CONTROL_RANGE_PARAMETER_BLOCK_U4;


// interrupts
#define USB_AUDIO_20_INTERRUPT_INFO_CLASS_SPECIFIC				0x00
#define USB_AUDIO_20_INTERRUPT_INFO_VENDOR_SPECIFIC			0x01
#define USB_AUDIO_20_INTERRUPT_INFO_ENDPOINT					0x02

typedef struct _USB_AUDIO_20_INTERRUPT_DATA_MESSAGE {
  UCHAR bInfo;					// bitmap, see bit definitions above
} USB_AUDIO_20_INTERRUPT_DATA_MESSAGE, *PUSB_AUDIO_20_INTERRUPT_DATA_MESSAGE;

typedef struct _USB_AUDIO_20_CS_INTERRUPT_DATA_MESSAGE {
  UCHAR  bInfo;					// bitmap, see bit definitions above
  UCHAR	 bAttribute;			// attribute that caused the interrrupt
  USHORT wValue;				// CS in the high byte and CN or MCN in the low byte
  USHORT wIndex;				// Entity ID or zero in the high byte and Interface or Endpoint in the low byte
} USB_AUDIO_20_CS_INTERRUPT_DATA_MESSAGE, *PUSB_AUDIO_20_CS_INTERRUPT_DATA_MESSAGE;


// channel cluster format
#define USB_AUDIO_20_CHANNEL_FRONT_LEFT						0x00000001
#define USB_AUDIO_20_CHANNEL_FRONT_RIGHT						0x00000002
#define USB_AUDIO_20_CHANNEL_FRONT_CENTER						0x00000004
#define USB_AUDIO_20_CHANNEL_LFE								0x00000008
#define USB_AUDIO_20_CHANNEL_BACK_LEFT							0x00000010
#define USB_AUDIO_20_CHANNEL_BACK_RIGHT						0x00000020
#define USB_AUDIO_20_CHANNEL_FRONT_LEFT_OF_CENTER				0x00000040
#define USB_AUDIO_20_CHANNEL_FRON_RIGHT_OF_CENTER				0x00000080
#define USB_AUDIO_20_CHANNEL_BACK_CENTER						0x00000100
#define USB_AUDIO_20_CHANNEL_SIDE_LEFT							0x00000200
#define USB_AUDIO_20_CHANNEL_SIDE_RIGHT						0x00000400
#define USB_AUDIO_20_CHANNEL_TOP_CENTER						0x00000800
#define USB_AUDIO_20_CHANNEL_TOP_FRONT_LEFT					0x00001000
#define USB_AUDIO_20_CHANNEL_TOP_FRONT_CENTER					0x00002000
#define USB_AUDIO_20_CHANNEL_TOP_FRONT_RIGHT					0x00004000
#define USB_AUDIO_20_CHANNEL_TOP_BACK_LEFT						0x00008000
#define USB_AUDIO_20_CHANNEL_TOP_BACK_CENTER					0x00010000
#define USB_AUDIO_20_CHANNEL_TOP_BACK_RIGHT					0x00020000
#define USB_AUDIO_20_CHANNEL_TOP_FRONT_LEFT_OF_CENTER			0x00040000
#define USB_AUDIO_20_CHANNEL_TOP_FRONT_RIGHT_OF_CENTER			0x00080000
#define USB_AUDIO_20_CHANNEL_LEFT_LFE							0x00100000
#define USB_AUDIO_20_CHANNEL_RIGHT_LFE							0x00200000
#define USB_AUDIO_20_CHANNEL_TOP_SIDE_LEFT						0x00400000
#define USB_AUDIO_20_CHANNEL_TOP_SIDE_RIGHT					0x00800000
#define USB_AUDIO_20_CHANNEL_BOTTOM_CENTER						0x01000000
#define USB_AUDIO_20_CHANNEL_BACK_LEFT_OF_CENTER				0x02000000
#define USB_AUDIO_20_CHANNEL_BACK_RIGHT_OF_CENTER				0x04000000
#define USB_AUDIO_20_CHANNEL_RESERVED							0x78000000
#define USB_AUDIO_20_CHANNEL_RAW_DATA							0x80000000

// USB-MIDI event packet
typedef struct _USB_MIDI_20_EVENT_PACKET {
	struct {
		UCHAR	CodeIndexNumber:4;	// indicates the classification of the bytes in MIDI[x] fields.
		UCHAR	CableNumber:4;		// a value ranging from 0x0 to 0xF indicating the number assignment 
									// of the Embedded MIDI Jack associated with the endpoint that is 
									// transferring the data
	};
	UCHAR	MIDI[3]; // actual MIDI event.
} USB_MIDI_20_EVENT_PACKET, *PUSB_MIDI_20_EVENT_PACKET;

// Code index number
#define CODE_INDEX_NUMBER_MISCELLANEOUS				0x0
#define CODE_INDEX_NUMBER_CABLE_EVENT				0x1
#define CODE_INDEX_NUMBER_2_BYTE_SYSTEM_COMMON		0x2
#define CODE_INDEX_NUMBER_3_BYTE_SYSTEM_COMMON		0x3
#define CODE_INDEX_NUMBER_SYSEX_START_OR_CONTINUE	0x4
#define CODE_INDEX_NUMBER_1_BYTE_SYSTEM_COMMON		0x5
#define CODE_INDEX_NUMBER_1_BYTE_SYSEX_END			0x5
#define CODE_INDEX_NUMBER_2_BYTE_SYSEX_END			0x6
#define CODE_INDEX_NUMBER_3_BYTE_SYSEX_END			0x7
#define CODE_INDEX_NUMBER_NOTE_OFF					0x8
#define CODE_INDEX_NUMBER_NOTE_ON					0x9
#define CODE_INDEX_NUMBER_POLYKEY_PRESSURE			0xA
#define CODE_INDEX_NUMBER_CONTROL_CHANGE			0xB
#define CODE_INDEX_NUMBER_PROGRAM_CHANGE			0xC
#define CODE_INDEX_NUMBER_CHANNEL_PRESSURE			0xD
#define CODE_INDEX_NUMBER_PITCH_BEND_CHANGE			0xE
#define CODE_INDEX_NUMBER_1_BYTE					0xF

// -------------------- USB audio descriptors --------------------

typedef struct _USB_AUDIO_20_CHANNEL_CLUSTER_DESCRIPTOR {
  UCHAR  bNrChannels;		// number of logical channels
  ULONG  bmChannelConfig;	// bitmap specifying which channels are present
  UCHAR  iChannelNames;		// optional index of the first non-predefined channel string descriptor
} USB_AUDIO_20_CHANNEL_CLUSTER_DESCRIPTOR, *PUSB_AUDIO_20_CHANNEL_CLUSTER_DESCRIPTOR;

// common audio header descriptor
typedef struct _USB_AUDIO_20_COMMON_DESCRIPTOR {
    UCHAR  bLength;				/* size of this descriptor */
    UCHAR  bDescriptorType;		/* descriptor type */
    UCHAR  bDescriptorSubtype;	/* sub descriptor type */
} USB_AUDIO_20_COMMON_DESCRIPTOR, *PUSB_AUDIO_20_COMMON_DESCRIPTOR;

// class-specific audio control interface header descriptor
typedef struct _USB_AUDIO_20_CS_AC_INTERFACE_DESCRIPTOR {
  UCHAR  bLength;				/* size of this descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AC_DESCRIPTOR_HEADER */
  USHORT bcdADC;				/* audio device spec release number in BCD */
  UCHAR	 bCategory;				/* indicates the primary use of this audio function, as intended by the manufacturer */
  USHORT wTotalLength;			/* combined length of this desriptor header and all Unit and Terminal descriptors */
  UCHAR  bmControls;			/* indicates which controls are present at the audio function level and what their 
								 * capabilities are */
} USB_AUDIO_20_CS_AC_INTERFACE_DESCRIPTOR, *PUSB_AUDIO_20_CS_AC_INTERFACE_DESCRIPTOR;

// type-common format descriptor
typedef struct _USB_AUDIO_20_COMMON_FORMAT_TYPE_DESCRIPTOR {
  UCHAR  bLength;				/* size of this descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AS_DESCRIPTOR_FORMAT_TYPE */
  UCHAR  bFormatType;			/* FORMAT_TYPE_I/II/III */
} USB_AUDIO_20_COMMON_FORMAT_TYPE_DESCRIPTOR, *PUSB_AUDIO_20_COMMON_FORMAT_TYPE_DESCRIPTOR;

// type-I format descriptor
typedef struct _USB_AUDIO_20_TYPE_I_FORMAT_DESCRIPTOR {
  UCHAR  bLength;				/* size of this descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AS_DESCRIPTOR_FORMAT_TYPE */
  UCHAR  bFormatType;			/* must be FORMAT_TYPE_I */
  UCHAR  bSubSlotSize;			/* number of bytes occupied by a one audio subslot. Can be 1, 2, 3 or 4 */
  UCHAR  bBitResolution;		/* number of actually effectively used bits from the available bits in an audio subslot */
} USB_AUDIO_20_TYPE_I_FORMAT_DESCRIPTOR, *PUSB_AUDIO_20_TYPE_I_FORMAT_DESCRIPTOR;

// type-II format descriptor
typedef struct _USB_AUDIO_20_TYPE_II_FORMAT_DESCRIPTOR {
  UCHAR  bLength;				/* size of this descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AS_DESCRIPTOR_FORMAT_TYPE */
  UCHAR  bFormatType;			/* must be FORMAT_TYPE_II */
  USHORT wMaxBitrate;			/* max number of bits per second (expressed in kbps) this interface can handle */
  USHORT wSlotsPerFrame;		/* number of PCM audio slots contained in one encoded audio frame */
} USB_AUDIO_20_TYPE_II_FORMAT_DESCRIPTOR, *PUSB_AUDIO_20_TYPE_II_FORMAT_DESCRIPTOR;

// type-III format descriptor
typedef struct _USB_AUDIO_20_TYPE_III_FORMAT_DESCRIPTOR {
  UCHAR  bLength;				/* size of this descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AS_DESCRIPTOR_FORMAT_TYPE */
  UCHAR  bFormatType;			/* must be FORMAT_TYPE_III */
  UCHAR  bSubSlotSize;			/* number of bytes occupied by a one audio subslot. Must be set to two */
  UCHAR  bBitResolution;		/* number of actually effectively used bits from the available bits in an audio subslot */
} USB_AUDIO_20_TYPE_III_FORMAT_DESCRIPTOR, *PUSB_AUDIO_20_TYPE_III_FORMAT_DESCRIPTOR;

// type-IV format descriptor
typedef struct _USB_AUDIO_20_TYPE_IV_FORMAT_DESCRIPTOR {
  UCHAR  bLength;				/* size of this descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AS_DESCRIPTOR_FORMAT_TYPE */
  UCHAR  bFormatType;			/* must be FORMAT_TYPE_III */
} USB_AUDIO_20_TYPE_IV_FORMAT_DESCRIPTOR, *PUSB_AUDIO_20_TYPE_IV_FORMAT_DESCRIPTOR;

// extended type-I format descriptor
typedef struct _USB_AUDIO_20_EXT_TYPE_I_FORMAT_DESCRIPTOR {
  UCHAR  bLength;				/* size of this descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AS_DESCRIPTOR_FORMAT_TYPE */
  UCHAR  bFormatType;			/* must be FORMAT_TYPE_I */
  UCHAR  bSubSlotSize;			/* number of bytes occupied by a one audio subslot. Can be 1, 2, 3 or 4 */
  UCHAR  bBitResolution;		/* number of actually effectively used bits from the available bits in an audio subslot */
  UCHAR	 bHeaderLength;			/* size of the packet header, in bytes */
  UCHAR  bControlSize;			/* size of the control channel words, in bytes */
  UCHAR  bSideBandProtocol;		/* identify the side band protocol used for the packet header and conttrol channel content */
} USB_AUDIO_20_EXT_TYPE_I_FORMAT_DESCRIPTOR, *PUSB_AUDIO_20_EXT_TYPE_I_FORMAT_DESCRIPTOR;

// type-II format descriptor
typedef struct _USB_AUDIO_20_EXT_TYPE_II_FORMAT_DESCRIPTOR {
  UCHAR  bLength;				/* size of this descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AS_DESCRIPTOR_FORMAT_TYPE */
  UCHAR  bFormatType;			/* must be FORMAT_TYPE_II */
  USHORT wMaxBitrate;			/* max number of bits per second (expressed in kbps) this interface can handle */
  USHORT wSlotsPerFrame;		/* number of PCM audio slots contained in one encoded audio frame */
  UCHAR	 bHeaderLength;			/* size of the packet header, in bytes */
  UCHAR  bSideBandProtocol;		/* identify the side band protocol used for the packet header and conttrol channel content */
} USB_AUDIO_20_EXT_TYPE_II_FORMAT_DESCRIPTOR, *PUSB_AUDIO_20_EXT_TYPE_II_FORMAT_DESCRIPTOR;

// type-III format descriptor
typedef struct _USB_AUDIO_20_EXT_TYPE_III_FORMAT_DESCRIPTOR {
  UCHAR  bLength;				/* size of this descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AS_DESCRIPTOR_FORMAT_TYPE */
  UCHAR  bFormatType;			/* must be FORMAT_TYPE_III */
  UCHAR  bSubSlotSize;			/* number of bytes occupied by a one audio subslot. Must be set to two */
  UCHAR  bBitResolution;		/* number of actually effectively used bits from the available bits in an audio subslot */
  UCHAR	 bHeaderLength;			/* size of the packet header, in bytes */
  UCHAR  bSideBandProtocol;		/* identify the side band protocol used for the packet header and conttrol channel content */
} USB_AUDIO_20_EXT_TYPE_III_FORMAT_DESCRIPTOR, *PUSB_AUDIO_20_EXT_TYPE_III_FORMAT_DESCRIPTOR;

// common entity descriptor
typedef struct _USB_AUDIO_20_COMMON_ENTITY_DESCRIPTOR {
  UCHAR  bLength;				/* size of the descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* sub descriptor type */
  UCHAR  bEntityID;				/* unique ID of the entity within the audio function */
} USB_AUDIO_20_COMMON_ENTITY_DESCRIPTOR, *PUSB_AUDIO_20_COMMON_ENTITY_DESCRIPTOR;


// common clock entity descriptor
typedef struct _USB_AUDIO_20_CLOCK_ENTITY_DESCRIPTOR {
  UCHAR  bLength;				// size of this descriptor
  UCHAR  bDescriptorType;		// must be USB_AUDIO_20_CS_INTERFACE
  UCHAR  bDescriptorSubtype;	// clock entity descriptor subtype
  UCHAR  bClockID;				// unique ID for the clock entity within the audio function
} USB_AUDIO_20_CLOCK_ENTITY_DESCRIPTOR, *PUSB_AUDIO_20_CLOCK_ENTITY_DESCRIPTOR;

// clock source descriptor
typedef struct _USB_AUDIO_20_CLOCK_SOURCE_DESCRIPTOR {
  UCHAR  bLength;				// size of this descriptor
  UCHAR  bDescriptorType;		// must be USB_AUDIO_20_CS_INTERFACE
  UCHAR  bDescriptorSubtype;	// must be USB_AUDIO_20_AC_DESCRIPTOR_CLOCK_SOURCE
  UCHAR  bClockID;				// unique ID for the clock source within the audio function
  UCHAR	 bmAttributes;			// specifies the clock type and whether an internal clock is free running or synchronized to the SOF
  UCHAR	 bmControls;			// indicates which controls are present and what their capabilities are
  UCHAR  bAssocTerminal;		// ID of the input terminal to which this clock source is associated 
  UCHAR  iClockSource;			// index of a string descriptor for the clock source
} USB_AUDIO_20_CLOCK_SOURCE_DESCRIPTOR, *PUSB_AUDIO_20_CLOCK_SOURCE_DESCRIPTOR;

// clock selector descriptor
typedef struct _USB_AUDIO_20_CLOCK_SELECTOR_DESCRIPTOR {
  UCHAR  bLength;				// size of this descriptor
  UCHAR  bDescriptorType;		// must be USB_AUDIO_20_CS_INTERFACE
  UCHAR  bDescriptorSubtype;	// must be USB_AUDIO_20_AC_DESCRIPTOR_CLOCK_SELECTOR
  UCHAR  bClockID;				// unique ID for the clock source within the audio function
  UCHAR  bNrInPins;				// number of input pins
  //UCHAR  baCSourceID[num_input_pins];  // array of IDs of clock sources to which input pins are connected
  //UCHAR  bmControls;				// indicates which controls are present and what their capabilities are
  //UCHAR  iClockSelector;			// index of a string descriptor for the clock selector
} USB_AUDIO_20_CLOCK_SELECTOR_DESCRIPTOR, *PUSB_AUDIO_20_CLOCK_SELECTOR_DESCRIPTOR;

#define USB_AUDIO_20_CLOCK_SELECTOR_DESCRIPTOR_BACSOURCEID_OFFSET		5
#define USB_AUDIO_20_CLOCK_SELECTOR_DESCRIPTOR_BMCONTROLS_OFFSET(num_input_pins)	(USB_AUDIO_20_CLOCK_SELECTOR_DESCRIPTOR_BACSOURCEID_OFFSET+num_input_pins)
#define USB_AUDIO_20_CLOCK_SELECTOR_DESCRIPTOR_ICLOCKSELECTOR_OFFSET(num_input_pins)	(USB_AUDIO_20_CLOCK_SELECTOR_DESCRIPTOR_BMCONTROLS_OFFSET(num_input_pins)+1)

// clock multiplier descriptor
typedef struct _USB_AUDIO_20_CLOCK_MULTIPLIER_DESCRIPTOR {
  UCHAR  bLength;				// size of this descriptor
  UCHAR  bDescriptorType;		// must be USB_AUDIO_20_CS_INTERFACE
  UCHAR  bDescriptorSubtype;	// must be USB_AUDIO_20_AC_DESCRIPTOR_CLOCK_MULTIPLIER
  UCHAR  bClockID;				// unique ID for the clock source within the audio function
  UCHAR  bCSourceID;			// ID of clock entity to which the input pin is connected
  UCHAR  bmControls;			// indicates which controls are present and what their capabilities are
  UCHAR  iClockMultiplier;		// index of a string descriptor for the clock multiplier
} USB_AUDIO_20_CLOCK_MULTIPLIER_DESCRIPTOR, *PUSB_AUDIO_20_CLOCK_MULTIPLIER_DESCRIPTOR;


// common terminal descriptor
typedef struct _USB_AUDIO_20_COMMON_TERMINAL_DESCRIPTOR {
  UCHAR  bLength;				// size of this descriptor
  UCHAR  bDescriptorType;		// must be USB_AUDIO_20_CS_INTERFACE
  UCHAR  bDescriptorSubtype;	// terminal descriptor subtype
  UCHAR  bTerminalID;			// unique ID for the terminal within the audio function
  USHORT wTerminalType;			// type of the terminal
  UCHAR  bAssocTerminal;		// ID of the input terminal to which this output terminal is associated 
} USB_AUDIO_20_COMMON_TERMINAL_DESCRIPTOR, *PUSB_AUDIO_20_COMMON_TERMINAL_DESCRIPTOR;

// input terminal descriptor
typedef struct _USB_AUDIO_20_INPUT_TERMINAL_DESCRIPTOR {
  UCHAR  bLength;				// size of this descriptor
  UCHAR  bDescriptorType;		// must be USB_AUDIO_20_CS_INTERFACE
  UCHAR  bDescriptorSubtype;	// must be USB_AUDIO_20_AC_DESCRIPTOR_INPUT_TERMINAL
  UCHAR  bTerminalID;			// unique ID for the terminal within the audio function
  USHORT wTerminalType;			// type of the terminal
  UCHAR  bAssocTerminal;		// ID of the output terminal to which this input terminal is associated 
  UCHAR  bCSourceID;			// ID of clock entity to which this terminal is connected
  UCHAR  bNrChannels;			// number of logical output channels in the terminal's output channel cluster
  ULONG  bmChannelConfig;		// describes the spatial location of the logical channels
  UCHAR  iChannelNames;			// index of a string descriptor for the name of the first logical channel
  USHORT bmControls;			// indicates which controls are present and what their capabilities are
  UCHAR  iTerminal;				// index of a string descriptor for the input terminal
} USB_AUDIO_20_INPUT_TERMINAL_DESCRIPTOR, *PUSB_AUDIO_20_INPUT_TERMINAL_DESCRIPTOR;

// output terminal descriptor
typedef struct _USB_AUDIO_20_OUTPUT_TERMINAL_DESCRIPTOR {
  UCHAR  bLength;				// size of this descriptor
  UCHAR  bDescriptorType;		// must be USB_AUDIO_20_CS_INTERFACE
  UCHAR  bDescriptorSubtype;	// must be USB_AUDIO_20_AC_DESCRIPTOR_OUTPUT_TERMINAL
  UCHAR  bTerminalID;			// unique ID for the terminal within the audio function
  USHORT wTerminalType;			// type of the terminal
  UCHAR  bAssocTerminal;		// ID of the input terminal to which this output terminal is associated 
  UCHAR  bSourceID;				// ID of the unit or terminal to which this terminal is connected
  UCHAR  bCSourceID;			// ID of clock entity to which this terminal is connected
  USHORT bmControls;			// indicates which controls are present and what their capabilities are
  UCHAR  iTerminal;				// index of a string descriptor for the input terminal
} USB_AUDIO_20_OUTPUT_TERMINAL_DESCRIPTOR, *PUSB_AUDIO_20_OUTPUT_TERMINAL_DESCRIPTOR;


// common unit descriptor
typedef struct _USB_AUDIO_20_COMMON_UNIT_DESCRIPTOR {
  UCHAR  bLength;				/* size of the descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* sub descriptor type */
  UCHAR  bUnitID;				/* unique ID of the unit */
} USB_AUDIO_20_COMMON_UNIT_DESCRIPTOR, *PUSB_AUDIO_20_COMMON_UNIT_DESCRIPTOR;

// feature unit descriptor
#define DEFINE_USB_AUDIO_20_FEATURE_DESCRIPTOR(unit_id, num_channels) \
typedef struct _USB_AUDIO_20_FEATURE_UNIT_DESCRIPTOR_##unit_id {\
  UCHAR  bLength;				/* size of the descriptor */ \
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */ \
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AC_DESCRIPTOR_FEATURE_UNIT */ \
  UCHAR  bUnitID;				/* unique ID of the unit */ \
  UCHAR  bSourceID;				/* ID of units or terminal to which this feature unit is connected */ \
  ULONG  bmaControls[num_channels+1]; /* controls available for different channels */ \
  UCHAR  iFeature;				/* index of the string descriptor for this feature unit */ \
} USB_AUDIO_20_FEATURE_UNIT_DESCRIPTOR_##unit_id, *PUSB_AUDIO_20_FEATURE_UNIT_DESCRIPTOR_##unit_id

typedef struct _USB_AUDIO_20_FEATURE_UNIT_DESCRIPTOR {
  UCHAR  bLength;				/* size of the descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AC_DESCRIPTOR_FEATURE_UNIT */
  UCHAR  bUnitID;				/* unique ID of the unit */
  UCHAR  bSourceID;				/* ID of units or terminal to which this feature unit is connected */
  //ULONG  bmaControls[num_channels+1]; /* controls available for different channels */ \
  //UCHAR  iFeature;				/* index of the string descriptor for this feature unit */
} USB_AUDIO_20_FEATURE_UNIT_DESCRIPTOR, *PUSB_AUDIO_20_FEATURE_UNIT_DESCRIPTOR;

#define USB_AUDIO_20_FEATURE_UNIT_DESCRIPTOR_BMACONTROLS_OFFSET	5
#define USB_AUDIO_20_FEATURE_UNIT_DESCRIPTOR_IFEATURE_OFFSET(num_channels)	(USB_AUDIO_20_FEATURE_UNIT_DESCRIPTOR_BMACONTROLS_OFFSET+(num_channels+1)*4)

// mixer unit descriptor
#define DEFINE_USB_AUDIO_20_MIXER_DESCRIPTOR(unit_id, num_input_pins, controls_size) \
typedef struct _USB_AUDIO_20_MIXER_UNIT_DESCRIPTOR_##unit_id {\
  UCHAR  bLength;				/* size of the descriptor */ \
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */ \
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AC_DESCRIPTOR_MIXER_UNIT */ \
  UCHAR  bUnitID;				/* unique ID of the unit */ \
  UCHAR  bNrInPins;				/* number of input pins */ \
  UCHAR  baSourceID[num_input_pins];/* array of IDs of Units or Terminals to which input pins are connected */ \
  UCHAR  bNrChannels;			/* number of logical output channels */ \
  ULONG  bmChannelConfig;		/* describes spatial location of the logical channels */ \
  UCHAR  iChannelNames;			/* index of the string descriptor for the first channel */ \
  UCHAR  bmMixerControls[controls_size];	/* control bit matrix */ \
  UCHAR  bmControls;			/* indicates which controls are present and what their capabilities are */ \
  UCHAR  iMixer;				/* index of the string descriptor for this mixer */ \
} USB_AUDIO_20_MIXER_UNIT_DESCRIPTOR_##unit_id, *PUSB_AUDIO_20_MIXER_UNIT_DESCRIPTOR_##unit_id

typedef struct _USB_AUDIO_20_MIXER_UNIT_DESCRIPTOR_ {
  UCHAR  bLength;				/* size of the descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AC_DESCRIPTOR_MIXER_UNIT */
  UCHAR  bUnitID;				/* unique ID of the unit */
  UCHAR  bNrInPins;				/* number of input pins */
  //UCHAR  baSourceID[num_input_pins];/* array of IDs of Units or Terminals to which input pins are connected */
  //UCHAR  bNrChannels;			/* number of logical output channels */
  //ULONG  bmChannelConfig;		/* describes spatial location of the logical channels */ 
  //UCHAR  iChannelNames;			/* index of the string descriptor for the first channel */
  //UCHAR  bmMixerControls[controls_size];	/* control bit matrix */ 
  //UCHAR  bmControls;			/* indicates which controls are present and what their capabilities are */
  //UCHAR  iMixer;				/* index of the string descriptor for this mixer */
} USB_AUDIO_20_MIXER_UNIT_DESCRIPTOR, *PUSB_AUDIO_20_MIXER_UNIT_DESCRIPTOR;

#define USB_AUDIO_20_MIXER_UNIT_DESCRIPTOR_BASOURCEID_OFFSET		5
#define USB_AUDIO_20_MIXER_UNIT_DESCRIPTOR_CLUSTER_OFFSET(num_input_pins)			(USB_AUDIO_20_MIXER_UNIT_DESCRIPTOR_BASOURCEID_OFFSET+num_input_pins)
#define USB_AUDIO_20_MIXER_UNIT_DESCRIPTOR_BMMIXERCONTROLS_OFFSET(num_input_pins)	(USB_AUDIO_20_MIXER_UNIT_DESCRIPTOR_CLUSTER_OFFSET(num_input_pins)+6)
#define USB_AUDIO_20_MIXER_UNIT_DESCRIPTOR_BMCONTROLS_OFFSET(num_input_pins, control_size)	(USB_AUDIO_20_MIXER_UNIT_DESCRIPTOR_BMMIXERCONTROLS_OFFSET(num_input_pins)+control_size)
#define USB_AUDIO_20_MIXER_UNIT_DESCRIPTOR_IMIXER_OFFSET(num_input_pins, control_size)	(USB_AUDIO_20_MIXER_UNIT_DESCRIPTOR_BMCONTROLS_OFFSET(num_input_pins, control_size)+1)

// selector unit descriptor
#define DEFINE_USB_AUDIO_20_SELECTOR_DESCRIPTOR(unit_id, num_input_pins) \
typedef struct _USB_AUDIO_20_SELECTOR_UNIT_DESCRIPTOR_##unit_id {\
  UCHAR  bLength;				/* size of the descriptor */ \
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */ \
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AC_DESCRIPTOR_SELECTOR_UNIT */ \
  UCHAR  bUnitID;				/* unique ID of the unit */ \
  UCHAR  bNrInPins;				/* number of input pins */ \
  UCHAR  baSourceID[num_input_pins];/* array of IDs of Units or Terminals to which input pins are connected */ \
  UCHAR  bmControls;			/* indicates which controls are present and what their capabilities are */ \
  UCHAR  iSelector;				/* index of the string descriptor for this selector */ \
} USB_AUDIO_20_SELECTOR_UNIT_DESCRIPTOR_##unit_id, *PUSB_AUDIO_20_SELECTOR_UNIT_DESCRIPTOR_##unit_id

typedef struct _USB_AUDIO_20_SELECTOR_UNIT_DESCRIPTOR {
  UCHAR  bLength;				/* size of the descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AC_DESCRIPTOR_SELECTOR_UNIT */
  UCHAR  bUnitID;				/* unique ID of the unit */
  UCHAR  bNrInPins;				/* number of input pins */
  //UCHAR  baSourceID[num_input_pins];/* array of IDs of Units or Terminals to which input pins are connected */
  //UCHAR  bmControls;			/* indicates which controls are present and what their capabilities are */
  //UCHAR  iSelector;			/* index of the string descriptor for this selector */
} USB_AUDIO_20_SELECTOR_UNIT_DESCRIPTOR, *PUSB_AUDIO_20_SELECTOR_UNIT_DESCRIPTOR;

#define USB_AUDIO_20_SELECTOR_UNIT_DESCRIPTOR_BASOURCEID_OFFSET		5
#define USB_AUDIO_20_SELECTOR_UNIT_DESCRIPTOR_BMCONTROLS_OFFSET(num_input_pins)	(USB_AUDIO_20_SELECTOR_UNIT_DESCRIPTOR_BASOURCEID_OFFSET+num_input_pins)
#define USB_AUDIO_20_SELECTOR_UNIT_DESCRIPTOR_ISELECTOR_OFFSET(num_input_pins)		(USB_AUDIO_20_SELECTOR_UNIT_DESCRIPTOR_BMCONTROLS_OFFSET(num_input_pins)+1)

typedef struct _USB_AUDIO_20_SRC_UNIT_DESCRIPTOR {
  UCHAR  bLength;				/* size of the descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AC_DESCRIPTOR_SRC_UNIT */
  UCHAR  bUnitID;				/* unique ID of the unit */
  UCHAR  bSourceID;				/* ID of units or terminal to which this SRC unit is connected */
  UCHAR  bCSourceInID;			/* ID of clock entity to which this SRC unit input section is connected */
  UCHAR  bCSourceOutID;			/* ID of clock entity to which this SRC unit output section is connected */
  UCHAR  iSRC;					/* index of the string descriptor for this SRC unit */
} USB_AUDIO_20_SRC_UNIT_DESCRIPTOR, *PUSB_AUDIO_20_SRC_UNIT_DESCRIPTOR;

// common effect unit descriptor
typedef struct _USB_AUDIO_20_COMMON_EFFECT_UNIT_DESCRIPTOR {
  UCHAR  bLength;				/* size of the descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AC_DESCRIPTOR_EFFECT_UNIT */
  UCHAR  bUnitID;				/* unique ID of the unit */ 
  USHORT wEffectType;			/* effect type */
  UCHAR  bSourceID;				/* ID of the unit or terminal to which this effect unit is connected */
  //ULONG  bmaControls[num_channels];	/* controls available for different channels */ 
  //UCHAR  iEffect;					/* index of the string descriptor for this effect unit */
} USB_AUDIO_20_COMMON_EFFECT_UNIT_DESCRIPTOR, *PUSB_AUDIO_20_COMMON_EFFECT_UNIT_DESCRIPTOR;

#define USB_AUDIO_20_COMMON_EFFECT_UNIT_DESCRIPTOR_BMACONTROLS_OFFSET	7
#define USB_AUDIO_20_COMMON_EFFECT_UNIT_DESCRIPTOR_IEFFECT_OFFSET(num_channels)	(USB_AUDIO_20_COMMON_EFFECT_UNIT_DESCRIPTOR_BMACONTROLS_OFFSET+(num_channels*4))

typedef USB_AUDIO_20_COMMON_EFFECT_UNIT_DESCRIPTOR USB_AUDIO_20_PARAMETRIC_EQ_SECTION_UNIT_DESCRIPTOR;
typedef USB_AUDIO_20_PARAMETRIC_EQ_SECTION_UNIT_DESCRIPTOR *PUSB_AUDIO_20_PARAMETRIC_EQ_SECTION_UNIT_DESCRIPTOR;
typedef USB_AUDIO_20_COMMON_EFFECT_UNIT_DESCRIPTOR USB_AUDIO_20_REVERBERATION_UNIT_DESCRIPTOR;
typedef USB_AUDIO_20_REVERBERATION_UNIT_DESCRIPTOR *PUSB_AUDIO_20_REVERBERATION_UNIT_DESCRIPTOR;
typedef USB_AUDIO_20_COMMON_EFFECT_UNIT_DESCRIPTOR USB_AUDIO_20_MODULATION_DELAY_UNIT_DESCRIPTOR;
typedef USB_AUDIO_20_MODULATION_DELAY_UNIT_DESCRIPTOR *PUSB_AUDIO_20_MODULATION_DELAY_UNIT_DESCRIPTOR;
typedef USB_AUDIO_20_COMMON_EFFECT_UNIT_DESCRIPTOR USB_AUDIO_20_DYNAMIC_RANGE_COMPRESSION_UNIT_DESCRIPTOR;
typedef USB_AUDIO_20_DYNAMIC_RANGE_COMPRESSION_UNIT_DESCRIPTOR *PUSB_AUDIO_20_DYNAMIC_RANGE_COMPRESSION_UNIT_DESCRIPTOR;

#define USB_AUDIO_20_PARAMETRIC_EQ_SECTION_UNIT_DESCRIPTOR_BMACONTROLS_OFFSET		USB_AUDIO_20_COMMON_EFFECT_UNIT_DESCRIPTOR_BMACONTROLS_OFFSET
#define USB_AUDIO_20_PARAMETRIC_EQ_SECTION_UNIT_DESCRIPTOR_IEFFECT_OFFSET			USB_AUDIO_20_COMMON_EFFECT_UNIT_DESCRIPTOR_IEFFECT_OFFSET
#define USB_AUDIO_20_REVERBERATION_UNIT_DESCRIPTOR_BMACONTROLS_OFFSET				USB_AUDIO_20_COMMON_EFFECT_UNIT_DESCRIPTOR_BMACONTROLS_OFFSET
#define USB_AUDIO_20_REVERBERATION_UNIT_DESCRIPTOR_IEFFECT_OFFSET					USB_AUDIO_20_COMMON_EFFECT_UNIT_DESCRIPTOR_IEFFECT_OFFSET
#define USB_AUDIO_20_MODULATION_DELAY_UNIT_DESCRIPTOR_BMACONTROLS_OFFSET			USB_AUDIO_20_COMMON_EFFECT_UNIT_DESCRIPTOR_BMACONTROLS_OFFSET
#define USB_AUDIO_20_MODULATION_DELAY_UNIT_DESCRIPTOR_IEFFECT_OFFSET				USB_AUDIO_20_COMMON_EFFECT_UNIT_DESCRIPTOR_IEFFECT_OFFSET
#define USB_AUDIO_20_DYNAMIC_RANGE_COMPRESSION_UNIT_DESCRIPTOR_BMACONTROLS_OFFSET	USB_AUDIO_20_COMMON_EFFECT_UNIT_DESCRIPTOR_BMACONTROLS_OFFSET
#define USB_AUDIO_20_DYNAMIC_RANGE_COMPRESSION_UNIT_DESCRIPTOR_IEFFECT_OFFSET		USB_AUDIO_20_COMMON_EFFECT_UNIT_DESCRIPTOR_IEFFECT_OFFSET

// common processing unit descriptor
typedef struct _USB_AUDIO_20_COMMON_PROCESSING_UNIT_DESCRIPTOR {
  UCHAR  bLength;				/* size of the descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AC_DESCRIPTOR_PROCESSING_UNIT */
  UCHAR  bUnitID;				/* unique ID of the unit */ 
  USHORT wProcessType;			/* process type */
  UCHAR  bNrInPins;				/* number of input pins, is 1 for currently defined processing units */
  UCHAR  bSourceID;				/* ID of the unit or terminal to which input pin is connected */
  UCHAR  bNrChannels;			/* number of logical output channels */
  ULONG  bmChannelConfig;		/* describes spatial location of the logical channels */
  UCHAR  iChannelNames;			/* index of the string descriptor for the first channel */
  USHORT bmControls;			/* indicates which controls are present and what their capabilities are */
  UCHAR  iProcessing;			/* index of the string descriptor for this processing unit */
} USB_AUDIO_20_COMMON_PROCESSING_UNIT_DESCRIPTOR, *PUSB_AUDIO_20_COMMON_PROCESSING_UNIT_DESCRIPTOR;

// up/down-mix unit descriptor
#define DEFINE_USB_AUDIO_20_UP_DOWNMIX_DESCRIPTOR(unit_id, num_modes) \
typedef struct _USB_AUDIO_20_UP_DOWNMIX_UNIT_DESCRIPTOR_##unit_id {\
  UCHAR  bLength;				/* size of the descriptor */ \
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */ \
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AC_DESCRIPTOR_PROCESSING_UNIT */ \
  UCHAR  bUnitID;				/* unique ID of the unit */ \
  USHORT wProcessType;			/* must be USB_AUDIO_20_PROCESS_UPMIX_DOWNMIX */ \
  UCHAR  bNrInPins;				/* number of input pins, must be 1 for up/down-mix unit */ \
  UCHAR  bSourceID;				/* ID of the unit or terminal to which input pin is connected */ \
  UCHAR  bNrChannels;			/* number of logical output channels */ \
  ULONG  bmChannelConfig;		/* describes spatial location of the logical channels */ \
  UCHAR  iChannelNames;			/* index of the string descriptor for the first channel */ \
  USHORT bmControls;			/* indicates which controls are present and what their capabilities are */ \
  UCHAR  iProcessing;			/* index of the string descriptor for this processing unit */ \
  UCHAR  bNrModes;				/* number of supported modes */ \
  ULONG  daModes[num_modes];	/* specifies active logical channels for each mode */ \
} USB_AUDIO_20_UP_DOWNMIX_UNIT_DESCRIPTOR_##unit_id, *PUSB_AUDIO_20_UP_DOWNMIX_UNIT_DESCRIPTOR_##unit_id

typedef struct _USB_AUDIO_20_UP_DOWNMIX_UNIT_DESCRIPTOR {
  UCHAR  bLength;				/* size of the descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AC_DESCRIPTOR_PROCESSING_UNIT */
  UCHAR  bUnitID;				/* unique ID of the unit */
  USHORT wProcessType;			/* must be USB_AUDIO_20_PROCESS_UPMIX_DOWNMIX */
  UCHAR  bNrInPins;				/* number of input pins, must be 1 for up/down-mix unit */
  UCHAR  bSourceID;				/* ID of the unit or terminal to which input pin is connected */
  UCHAR  bNrChannels;			/* number of logical output channels */
  ULONG  bmChannelConfig;		/* describes spatial location of the logical channels */
  UCHAR  iChannelNames;			/* index of the string descriptor for the first channel */
  USHORT bmControls;			/* indicates which controls are present and what their capabilities are */
  UCHAR  iProcessing;			/* index of the string descriptor for this processing unit */
  UCHAR  bNrModes;				/* number of supported modes */
  //ULONG  daModes[num_modes];	/* specifies active logical channels for each mode */
} USB_AUDIO_20_UP_DOWNMIX_UNIT_DESCRIPTOR, *PUSB_AUDIO_20_UP_DOWNMIX_UNIT_DESCRIPTOR;

#define USB_AUDIO_20_UP_DOWNMIX_UNIT_DESCRIPTOR_DAMODES_OFFSET		18

// Dolby Prologic unit descriptor
#define DEFINE_USB_AUDIO_20_PROLOGIC_DESCRIPTOR(unit_id, num_modes) \
typedef struct _USB_AUDIO_20_PROLOGIC_UNIT_DESCRIPTOR_##unit_id {\
  UCHAR  bLength;				/* size of the descriptor */ \
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */ \
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AC_DESCRIPTOR_PROCESSING_UNIT */ \
  UCHAR  bUnitID;				/* unique ID of the unit */ \
  USHORT wProcessType;			/* must be USB_AUDIO_20_PROCESS_DOLBY_PROLOGIC */ \
  UCHAR  bNrInPins;				/* number of input pins, must be 1 for Dolby Prologic unit */ \
  UCHAR  bSourceID;				/* ID of the unit or terminal to which input pin is connected */ \
  UCHAR  bNrChannels;			/* number of logical output channels */ \
  ULONG  bmChannelConfig;		/* describes spatial location of the logical channels */ \
  UCHAR  iChannelNames;			/* index of the string descriptor for the first channel */ \
  USHORT bmControls;			/* indicates which controls are present and what their capabilities are */ \
  UCHAR  iProcessing;			/* index of the string descriptor for this processing unit */ \
  UCHAR  bNrModes;				/* number of supported modes, a maximum of 3 modes is possible */ \
  ULONG  daModes[num_modes];	/* specifies active logical channels for each mode */ \
} USB_AUDIO_20_PROLOGIC_UNIT_DESCRIPTOR_##unit_id, *PUSB_AUDIO_20_PROLOGIC_UNIT_DESCRIPTOR_##unit_id

typedef struct _USB_AUDIO_20_PROLOGIC_UNIT_DESCRIPTOR {
  UCHAR  bLength;				/* size of the descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AC_DESCRIPTOR_PROCESSING_UNIT */
  UCHAR  bUnitID;				/* unique ID of the unit */
  USHORT wProcessType;			/* must be USB_AUDIO_20_PROCESS_DOLBY_PROLOGIC */
  UCHAR  bNrInPins;				/* number of input pins, must be 1 for Dolby Prologic unit */
  UCHAR  bSourceID;				/* ID of the unit or terminal to which input pin is connected */
  UCHAR  bNrChannels;			/* number of logical output channels */
  ULONG  bmChannelConfig;		/* describes spatial location of the logical channels */
  UCHAR  iChannelNames;			/* index of the string descriptor for the first channel */
  USHORT bmControls;			/* indicates which controls are present and what their capabilities are */
  UCHAR  iProcessing;			/* index of the string descriptor for this processing unit */
  UCHAR  bNrModes;				/* number of supported modes, a maximum of 3 modes is possible */
  //ULONG  daModes[num_modes];	/* specifies active logical channels for each mode */
} USB_AUDIO_20_PROLOGIC_UNIT_DESCRIPTOR, *PUSB_AUDIO_20_PROLOGIC_UNIT_DESCRIPTOR;

#define USB_AUDIO_20_PROLOGIC_UNIT_DESCRIPTOR_DAMODES_OFFSET	18

// stereo extender unit descriptor
#define DEFINE_USB_AUDIO_20_STEREO_EXTENDER_DESCRIPTOR(unit_id) \
typedef struct _USB_AUDIO_20_STEREO_EXTENDER_UNIT_DESCRIPTOR_##unit_id {\
  UCHAR  bLength;				/* size of the descriptor */ \
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */ \
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AC_DESCRIPTOR_PROCESSING_UNIT */ \
  UCHAR  bUnitID;				/* unique ID of the unit */ \
  USHORT wProcessType;			/* must be USB_AUDIO_20_PROCESS_3D_STEREO_EXTENDER */ \
  UCHAR  bNrInPins;				/* number of input pins, must be 1 for 3D stereo extender */ \
  UCHAR  bSourceID;				/* ID of the unit or terminal to which input pin is connected */ \
  UCHAR  bNrChannels;			/* number of logical output channels */ \
  ULONG  bmChannelConfig;		/* describes spatial location of the logical channels */ \
  UCHAR  iChannelNames;			/* index of the string descriptor for the first channel */ \
  USHORT bmControls;			/* indicates which controls are present and what their capabilities are */ \
  UCHAR  iProcessing;			/* index of the string descriptor for this processing unit */ \
} USB_AUDIO_20_STEREO_EXTENDER_UNIT_DESCRIPTOR_##unit_id, *PUSB_AUDIO_20_STEREO_EXTENDER_UNIT_DESCRIPTOR_##unit_id

typedef struct _USB_AUDIO_20_STEREO_EXTENDER_UNIT_DESCRIPTOR {
  UCHAR  bLength;				/* size of the descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AC_DESCRIPTOR_PROCESSING_UNIT */
  UCHAR  bUnitID;				/* unique ID of the unit */
  USHORT wProcessType;			/* must be USB_AUDIO_20_PROCESS_STEREO_EXTENDER */
  UCHAR  bNrInPins;				/* number of input pins, must be 1 for 3D stereo extender */
  UCHAR  bSourceID;				/* ID of the unit or terminal to which input pin is connected */
  UCHAR  bNrChannels;			/* number of logical output channels */
  ULONG  bmChannelConfig;		/* describes spatial location of the logical channels */
  UCHAR  iChannelNames;			/* index of the string descriptor for the first channel */
  USHORT bmControls;			/* indicates which controls are present and what their capabilities are */
  UCHAR  iProcessing;			/* index of the string descriptor for this processing unit */
} USB_AUDIO_20_STEREO_EXTENDER_UNIT_DESCRIPTOR, *PUSB_AUDIO_20_STEREO_EXTENDER_UNIT_DESCRIPTOR;


// extension unit descriptor
#define DEFINE_USB_AUDIO_20_EXTENSION_UNIT_DESCRIPTOR(unit_id, num_input_pins) \
typedef struct _USB_AUDIO_20_EXTENSION_UNIT_DESCRIPTOR_##unit_id {\
  UCHAR  bLength;				/* size of the descriptor */ \
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */ \
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AC_DESCRIPTOR_EXTENSION_UNIT */ \
  UCHAR  bUnitID;				/* unique ID of the unit */ \
  USHORT wExtensionCode;		/* vendor-specific code identifying extension unit */ \
  UCHAR  bNrInPins;				/* number of input pins */ \
  UCHAR  baSourceID[num_input_pins]; /* IDs of the units or terminals to which input pins are connected */ \
  UCHAR  bNrChannels;			/* number of logical output channels */ \
  ULONG  bmChannelConfig;		/* describes spatial location of the logical channels */ \
  UCHAR  iChannelNames;			/* index of the string descriptor for the first channel */ \
  UCHAR bmControls;			/* indicates which controls are present and what their capabilities are */ \
  UCHAR  iExtension;			/* index of the string descriptor for this extension unit */ \
} USB_AUDIO_20_EXTENSION_UNIT_DESCRIPTOR_##unit_id, *PUSB_AUDIO_20_EXTENSION_UNIT_DESCRIPTOR_##unit_id

typedef struct _USB_AUDIO_20_EXTENSION_UNIT_DESCRIPTOR {
  UCHAR  bLength;				/* size of the descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_AC_DESCRIPTOR_EXTENSION_UNIT */
  UCHAR  bUnitID;				/* unique ID of the unit */
  USHORT wExtensionCode;		/* vendor-specific code identifying extension unit */
  UCHAR  bNrInPins;				/* number of input pins */
  //UCHAR  baSourceID[num_input_pins]; /* IDs of the units or terminals to which input pins are connected */
  //UCHAR  bNrChannels;			/* number of logical output channels */
  //ULONG  bmChannelConfig;		/* describes spatial location of the logical channels */
  //UCHAR  iChannelNames;		/* index of the string descriptor for the first channel */
  //UCHAR  bmControls;			/* indicates which controls are present and what their capabilities are */
  //UCHAR  iExtension;			/* index of the string descriptor for this extension unit */
} USB_AUDIO_20_EXTENSION_UNIT_DESCRIPTOR, *PUSB_AUDIO_20_EXTENSION_UNIT_DESCRIPTOR;

#define USB_AUDIO_20_EXTENSION_UNIT_DESCRIPTOR_BASOURCEID_OFFSET		7
#define USB_AUDIO_20_EXTENSION_UNIT_DESCRIPTOR_CLUSTER_OFFSET(num_input_pins)		(USB_AUDIO_20_EXTENSION_UNIT_DESCRIPTOR_BASOURCEID_OFFSET+num_input_pins)
#define USB_AUDIO_20_EXTENSION_UNIT_DESCRIPTOR_BMCONTROLS_OFFSET(num_input_pins)	(USB_AUDIO_20_EXTENSION_UNIT_DESCRIPTOR_CLUSTER_OFFSET(num_input_pins)+6)
#define USB_AUDIO_20_EXTENSION_UNIT_DESCRIPTOR_IEXTENSION_OFFSET(num_input_pins)	(USB_AUDIO_20_EXTENSION_UNIT_DESCRIPTOR_BMCONTROLS_OFFSET(num_input_pins)+1)


// class-specific audio streaming interface descriptor
typedef struct _USB_AUDIO_20_CS_AS_INTERFACE_DESCRIPTOR {
  UCHAR  bLength;				// size of the descriptor
  UCHAR  bDescriptorType;		// must be USB_AUDIO_20_CS_INTERFACE
  UCHAR  bDescriptorSubtype;    // must be USB_AUDIO_20_AS_DESCRIPTOR_GENERAL
  UCHAR  bTerminalLink;			// the ID of the terminal to which the endpoint of this interface is connected
  UCHAR  bmControls;			// indicates which controls are present and what their capabilities are
  UCHAR  bFormatType;			// format type code
  ULONG  bmFormats;				// audio data formats
  UCHAR  bNrChannels;			// number of physical output channels
  ULONG  bmChannelConfig;		// describes spatial location of the physical channels
  UCHAR  iChannelNames;			// index of the string descriptor for the first physical channel
} USB_AUDIO_20_CS_AS_INTERFACE_DESCRIPTOR, *PUSB_AUDIO_20_CS_AS_INTERFACE_DESCRIPTOR;

// class-specific audio streaming encoder descriptor
typedef struct _USB_AUDIO_20_CS_AS_ENCODER_DESCRIPTOR {
  UCHAR  bLength;				// size of the descriptor
  UCHAR  bDescriptorType;		// must be USB_AUDIO_20_CS_INTERFACE
  UCHAR  bDescriptorSubtype;    // must be USB_AUDIO_20_AS_DESCRIPTOR_ENCODER
  UCHAR  bEncoderID;			// unique ID of the encoder
  UCHAR	 bEncoder;				// encoder type code
  ULONG  bmControls;			// indicates which controls are present and what their capabilities are
  UCHAR  iParam1;				// index of the string descriptor describing the purpose of Param1
  UCHAR  iParam2;				// index of the string descriptor describing the purpose of Param2
  UCHAR  iParam3;				// index of the string descriptor describing the purpose of Param3
  UCHAR  iParam4;				// index of the string descriptor describing the purpose of Param4
  UCHAR  iParam5;				// index of the string descriptor describing the purpose of Param5
  UCHAR  iParam6;				// index of the string descriptor describing the purpose of Param6
  UCHAR  iParam7;				// index of the string descriptor describing the purpose of Param7
  UCHAR  iParam8;				// index of the string descriptor describing the purpose of Param8
  UCHAR  iEncoder;				// index of the string descriptor for the encoder
} USB_AUDIO_20_CS_AS_ENCODER_DESCRIPTOR, *PUSB_AUDIO_20_CS_AS_ENCODER_DESCRIPTOR;

// class-specific audio streaming decoder descriptor
typedef struct _USB_AUDIO_20_CS_AS_COMMON_DECODER_DESCRIPTOR {
  UCHAR  bLength;				// size of the descriptor
  UCHAR  bDescriptorType;		// must be USB_AUDIO_20_CS_INTERFACE
  UCHAR  bDescriptorSubtype;    // must be USB_AUDIO_20_AS_DESCRIPTOR_DECODER
  UCHAR  bDecoderID;			// unique ID of the decoder
  UCHAR	 bDecoder;				// decoder type code
} USB_AUDIO_20_CS_AS_COMMON_DECODER_DESCRIPTOR, *PUSB_AUDIO_20_CS_AS_COMMON_DECODER_DESCRIPTOR;

// mpeg decoder descriptor
typedef struct _USB_AUDIO_20_CS_AS_MPEG_DECODER_DESCRIPTOR {
  UCHAR  bLength;				// size of the descriptor
  UCHAR  bDescriptorType;		// must be USB_AUDIO_20_CS_INTERFACE
  UCHAR  bDescriptorSubtype;    // must be USB_AUDIO_20_AS_DESCRIPTOR_DECODER
  UCHAR  bDecoderID;			// unique ID of the decoder
  UCHAR	 bDecoder;				// must be USB_AUDIO_20_DECODER_MPEG
  USHORT bmMPEGCapabilities;	// specific MPEG capabilities
  UCHAR  bmMPEGFeatures;		// specific MPEG features
  UCHAR  bmControls;			// indicates which controls are present and what their capabilities are
  UCHAR  iDecoder;				// index of the string descriptor for the decoder
} USB_AUDIO_20_CS_AS_MPEG_DECODER_DESCRIPTOR, *PUSB_AUDIO_20_CS_AS_MPEG_DECODER_DESCRIPTOR;

// ac3 decoder descriptor
typedef struct _USB_AUDIO_20_CS_AS_AC3_DECODER_DESCRIPTOR {
  UCHAR  bLength;				// size of the descriptor
  UCHAR  bDescriptorType;		// must be USB_AUDIO_20_CS_INTERFACE
  UCHAR  bDescriptorSubtype;    // must be USB_AUDIO_20_AS_DESCRIPTOR_DECODER
  UCHAR  bDecoderID;			// unique ID of the decoder
  UCHAR	 bDecoder;				// must be USB_AUDIO_20_DECODER_AC3
  ULONG	 bmBSID;				// supported bitstream ID modes
  UCHAR  bmAC3Features;			// specific AC3 features
  UCHAR  bmControls;			// indicates which controls are present and what their capabilities are
  UCHAR  iDecoder;				// index of the string descriptor for the decoder
} USB_AUDIO_20_CS_AS_AC3_DECODER_DESCRIPTOR, *PUSB_AUDIO_20_CS_AS_AC3_DECODER_DESCRIPTOR;

// wma decoder descriptor
typedef struct _USB_AUDIO_20_CS_AS_WMA_DECODER_DESCRIPTOR {
  UCHAR  bLength;				// size of the descriptor
  UCHAR  bDescriptorType;		// must be USB_AUDIO_20_CS_INTERFACE
  UCHAR  bDescriptorSubtype;    // must be USB_AUDIO_20_AS_DESCRIPTOR_DECODER
  UCHAR  bDecoderID;			// unique ID of the decoder
  UCHAR	 bDecoder;				// must be USB_AUDIO_20_DECODER_WMA
  USHORT bmWMAProfile;			// compression-related features
  UCHAR  bmControls;			// indicates which controls are present and what their capabilities are
  UCHAR  iDecoder;				// index of the string descriptor for the decoder
} USB_AUDIO_20_CS_AS_WMA_DECODER_DESCRIPTOR, *PUSB_AUDIO_20_CS_AS_WMA_DECODER_DESCRIPTOR;

// dts decoder descriptor
typedef struct _USB_AUDIO_20_CS_AS_DTS_DECODER_DESCRIPTOR {
  UCHAR  bLength;				// size of the descriptor
  UCHAR  bDescriptorType;		// must be USB_AUDIO_20_CS_INTERFACE
  UCHAR  bDescriptorSubtype;    // must be USB_AUDIO_20_AS_DESCRIPTOR_DECODER
  UCHAR  bDecoderID;			// unique ID of the decoder
  UCHAR	 bDecoder;				// must be USB_AUDIO_20_DECODER_DTS
  UCHAR  bmCapabilities;		// specific DTS capabilities
  UCHAR  bmControls;			// indicates which controls are present and what their capabilities are
  UCHAR  iDecoder;				// index of the string descriptor for the decoder
} USB_AUDIO_20_CS_AS_DTS_DECODER_DESCRIPTOR, *PUSB_AUDIO_20_CS_AS_DTS_DECODER_DESCRIPTOR;


// class-specific AS isochronous audio data endpoint descriptor
typedef struct _USB_AUDIO_20_CS_AS_AUDIO_ENDPOINT_DESCRIPTOR {
  UCHAR  bLength;				// size of the descriptor
  UCHAR  bDescriptorType;		// must be USB_AUDIO_20_CS_ENDPOINT
  UCHAR  bDescriptorSubtype;	// must be USB_AUDIO_20_EP_DESCRIPTOR_GENERAL
  UCHAR  bmAttributes;			// endpoint attributes (see above)
  UCHAR  bmControls;			// indicates which controls are present and what their capabilities are
  UCHAR  bLockDelayUnits;		// units used for wLockDelay field, must be 0 for async endpoints
  USHORT wLockDelay;			// time to lock internal clock recovery, must be 0 for async
} USB_AUDIO_20_CS_AS_AUDIO_ENDPOINT_DESCRIPTOR, *PUSB_AUDIO_20_CS_AS_AUDIO_ENDPOINT_DESCRIPTOR;


// class-specific MIDI streaming interface descriptor
typedef struct _USB_AUDIO_20_CS_MS_INTERFACE_DESCRIPTOR {
  UCHAR  bLength;				// size of the descriptor
  UCHAR  bDescriptorType;		// must be USB_AUDIO_20_CS_INTERFACE
  UCHAR  bDescriptorSubtype;    // must be USB_AUDIO_20_MS_DESCRIPTOR_HEADER
  USHORT bcdMSC;				// MIDIStreaming subclass release number in BCD
  USHORT wTotalLength;			// total number of bytes returned for the class-specific MIDI streaming I/F
  								// descriptor (includes the combined length of this descriptor header and all
  								// Jack and Element descriptors)
} USB_AUDIO_20_CS_MS_INTERFACE_DESCRIPTOR, *PUSB_AUDIO_20_CS_MS_INTERFACE_DESCRIPTOR;

// Common MIDI jack descriptor
typedef struct _USB_AUDIO_20_MIDI_COMMON_JACK_DESCRIPTOR {
  UCHAR  bLength;				// size of the descriptor
  UCHAR  bDescriptorType;		// must be USB_AUDIO_20_CS_INTERFACE
  UCHAR  bDescriptorSubtype;	// must be USB_AUDIO_20_MS_DESCRIPTOR_MIDI_IN_JACK
  UCHAR  bJackType;				// must be MIDI_JACK_TYPE_EMBEDDED or MIDI_JACK_TYPE_EXTERNAL
  UCHAR  bJackID;				// unique ID for the jack within the USB-MIDI function
} USB_AUDIO_20_MIDI_COMMON_JACK_DESCRIPTOR, *PUSB_AUDIO_20_MIDI_COMMON_JACK_DESCRIPTOR;


// MIDI IN jack descriptor
typedef struct _USB_AUDIO_20_MIDI_IN_JACK_DESCRIPTOR {
  UCHAR  bLength;				// size of the descriptor
  UCHAR  bDescriptorType;		// must be USB_AUDIO_20_CS_INTERFACE
  UCHAR  bDescriptorSubtype;	// must be USB_AUDIO_20_MS_DESCRIPTOR_MIDI_IN_JACK
  UCHAR  bJackType;				// must be MIDI_JACK_TYPE_EMBEDDED or MIDI_JACK_TYPE_EXTERNAL
  UCHAR  bJackID;				// unique ID for the jack within the USB-MIDI function
  UCHAR  iJack;					// index of a string descriptor for the MIDI IN Jack
} USB_AUDIO_20_MIDI_IN_JACK_DESCRIPTOR, *PUSB_AUDIO_20_MIDI_IN_JACK_DESCRIPTOR;


// MIDI OUT jack descriptor
#define DEFINE_USB_MIDI_20_OUT_JACK_DESCRIPTOR(unit_id, num_input_pins) \
typedef struct _USB_AUDIO_20_MIDI_OUT_JACK_DESCRIPTOR_##unit_id { \
  UCHAR  bLength;				/* size of the descriptor */ \
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */ \
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_MS_DESCRIPTOR_MIDI_OUT_JACK */ \
  UCHAR  bJackType;				/* must be MIDI_JACK_TYPE_EMBEDDED or MIDI_JACK_TYPE_EXTERNAL */ \
  UCHAR  bJackID;				/* unique ID for the jack within the USB-MIDI function */ \
  UCHAR  bNrInputPins;			/* number of input pins of this MIDI OUT Jack */ \
  /* source structure */ \
  struct { \
  UCHAR  baSourceID;			/* ID of the entity to which N-th pin of this MIDI OUT Jack is connected */ \
  UCHAR  baSourcePin;			/* output pin number of the entity to which N-th pin of this MIDI OUT Jack is connected */ \
  } saSource[num_input_pins]; \
  UCHAR  iJack;					/* index of a string descriptor for the MIDI OUT Jack */ \
} USB_AUDIO_20_MIDI_OUT_JACK_DESCRIPTOR_##unit_id, *PUSB_AUDIO_20_MIDI_OUT_JACK_DESCRIPTOR_##unit_id

typedef struct _USB_AUDIO_20_MIDI_OUT_JACK_DESCRIPTOR {
  UCHAR  bLength;				/* size of the descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_MS_DESCRIPTOR_MIDI_OUT_JACK */
  UCHAR  bJackType;				/* must be MIDI_JACK_TYPE_EMBEDDED or MIDI_JACK_TYPE_EXTERNAL */
  UCHAR  bJackID;				/* unique ID for the jack within the USB-MIDI function */
  UCHAR  bNrInputPins;			/* number of input pins of this MIDI OUT Jack */
  /* source structure */
  //struct {
  //UCHAR  baSourceID;			/* ID of the entity to which N-th pin of this MIDI OUT Jack is connected */
  //UCHAR  baSourcePin;			/* output pin number of the entity to which N-th pin of this MIDI OUT Jack is connected */
  //} saSource[1];
  //UCHAR  iJack;					/* index of a string descriptor for the MIDI OUT Jack */
} USB_AUDIO_20_MIDI_OUT_JACK_DESCRIPTOR, *PUSB_AUDIO_20_MIDI_OUT_JACK_DESCRIPTOR;

typedef struct _USB_AUDIO_20_MIDI_SOURCE_ID_PIN_PAIR {
  UCHAR  bSourceID;				/* ID of the entity to which N-th pin of this MIDI OUT Jack is connected */
  UCHAR  bSourcePin;			/* output pin number of the entity to which N-th pin of this MIDI OUT Jack is connected */
} USB_AUDIO_20_MIDI_SOURCE_ID_PIN_PAIR, *PUSB_AUDIO_20_MIDI_SOURCE_ID_PIN_PAIR;

#define USB_AUDIO_20_MIDI_OUT_JACK_DESCRIPTOR_SOURCE_OFFSET				(6)
#define USB_AUDIO_20_MIDI_OUT_JACK_DESCRIPTOR_IJACK_OFFSET(num_input_pins)	(USB_AUDIO_20_MIDI_OUT_JACK_DESCRIPTOR_SOURCE_OFFSET+(2*num_input_pins))

// MIDI Element descriptor
#define DEFINE_USB_MIDI_20_ELEMENT_DESCRIPTOR(unit_id, num_input_pins, cap_size) \
typedef struct _USB_AUDIO_20_MIDI_ELEMENT_DESCRIPTOR_##unit_id { \
  UCHAR  bLength;				/* size of the descriptor */ \
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */ \
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_MS_DESCRIPTOR_MIDI_ELEMENT */ \
  UCHAR  bElementID;			/* unique ID for the Element within the USB-MIDI function */ \
  UCHAR  bNrInputPins;			/* number of input pins of this Element */ \
  /* source structure */ \
  struct { \
  UCHAR  baSourceID;			/* ID of the entity to which N-th pin of this Element is connected */ \
  UCHAR  baSourcePin;			/* output pin number of the entity to which N-th pin of this Element is connected */ \
  } saSource[num_input_pins]; \
  UCHAR  bNrOutputPins;			/* number of output pins of this element */ \
  UCHAR  bInTerminalLink;		/* the terminal ID of the Input Terminal to which this Element is connected */ \
  UCHAR  bOutTerminalLink;		/* the terminal ID of the Output Terminal to which this Element is connected */ \
  UCHAR  bElCapsSize;			/* size (in bytes) of the bmElementCaps field */ \
  UCHAR  bmElementCaps[cap_size];  /* element capabilities */ \
  UCHAR  iElement;				/* index of a string descriptor for the MIDI OUT Jack */ \
} USB_AUDIO_20_MIDI_ELEMENT_DESCRIPTOR_##unit_id, *PUSB_AUDIO_20_MIDI_ELEMENT_DESCRIPTOR_##unit_id

typedef struct _USB_AUDIO_20_MIDI_ELEMENT_DESCRIPTOR {
  UCHAR  bLength;				/* size of the descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_INTERFACE */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_MS_DESCRIPTOR_MIDI_ELEMENT */
  UCHAR  bElementID;			/* unique ID for the Element within the USB-MIDI function */
  UCHAR  bNrInputPins;			/* number of input pins of this Element */ \
  /* source structure */
  //struct {
  //UCHAR  baSourceID;			/* ID of the entity to which N-th pin of this Element is connected */
  //UCHAR  baSourcePin;			/* output pin number of the entity to which N-th pin of this Element is connected */
  //} saSource[num_input_pins];
  //UCHAR  bNrOutputPins;			/* number of output pins of this element */
  //UCHAR  bInTerminalLink;		/* the terminal ID of the Input Terminal to which this Element is connected */
  //UCHAR  bOutTerminalLink;		/* the terminal ID of the Output Terminal to which this Element is connected */
  //UCHAR  bElCapsSize;			/* size (in bytes) of the bmElementCaps field */ \
  //UCHAR  bmElementCaps[cap_size];  /* element capabilities */
  //UCHAR  iElement;				/* index of a string descriptor for the MIDI OUT Jack */
} USB_AUDIO_20_MIDI_ELEMENT_DESCRIPTOR, *PUSB_AUDIO_20_MIDI_ELEMENT_DESCRIPTOR;

#define USB_AUDIO_20_MIDI_ELEMENT_DESCRIPTOR_SOURCE_OFFSET		5

typedef struct _USB_AUDIO_20_MIDI_ELEMENT_INFORMATION {
  UCHAR  bNrOutputPins;			/* number of output pins of this element */
  UCHAR  bInTerminalLink;		/* the terminal ID of the Input Terminal to which this Element is connected */
  UCHAR  bOutTerminalLink;		/* the terminal ID of the Output Terminal to which this Element is connected */
  UCHAR  bElCapsSize;			/* size (in bytes) of the bmElementCaps field */ \
  UCHAR  bmElementCaps[1];		/* element capabilities */
} USB_AUDIO_20_MIDI_ELEMENT_INFORMATION, *PUSB_AUDIO_20_MIDI_ELEMENT_INFORMATION;

#define USB_AUDIO_20_MIDI_ELEMENT_DESCRIPTOR_INFORMATION_OFFSET(num_input_pins)		(USB_AUDIO_20_MIDI_ELEMENT_DESCRIPTOR_SOURCE_OFFSET+(2*num_input_pins))
#define USB_AUDIO_20_MIDI_ELEMENT_DESCRIPTOR_IELEMENT_OFFSET(num_input_pins, cap_size)	(USB_AUDIO_20_MIDI_ELEMENT_DESCRIPTOR_SOURCE_OFFSET+sizeof(USB_AUDIO_20_MIDI_ELEMENT_INFORMATION)-1+(2*num_input_pins)+cap_size)

// audio class-specific MS bulk data endpoint descriptor
typedef struct _USB_AUDIO_20_CS_MS_DATA_ENDPOINT_DESCRIPTOR {
  UCHAR  bLength;				/* size of the descriptor */
  UCHAR  bDescriptorType;		/* must be USB_AUDIO_20_CS_ENDPOINT */
  UCHAR  bDescriptorSubtype;	/* must be USB_AUDIO_20_EP_DESCRIPTOR_GENERAL */
  UCHAR  bNumEmbMIDIJacks;		/* number of embedded MIDI jacks */
  UCHAR  baAssocJackID[1];		/* IDs of the embedded jacks associated with this endpoint */
} USB_AUDIO_20_CS_MS_DATA_ENDPOINT_DESCRIPTOR, *PUSB_AUDIO_20_CS_MS_DATA_ENDPOINT_DESCRIPTOR;

#include <poppack.h>

#endif